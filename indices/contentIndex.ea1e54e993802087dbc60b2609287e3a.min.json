{"/":{"title":"Example Front Page","content":"\n# Test Documentation Page\n\n\n### This page uses [Quartz](https://github.com/jackyzha0/quartz) in order to serve an Obsidian vault directly through GitHub pages. GitHub actions will automatically update this page after a push to the 'hugo' branch. Some additional modifications have been made as compared to the Quartz documentation. \n\n\n[[Example_Notes/Example Notes|Example Notes]]\n\n[[Daily_Notes/2023-05-22|2023-05-22]]","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":["notes"]},"/2023-05-21":{"title":"May 21, 2023","content":"\n- [ ] notes\n- [ ] more notes\n\n[[_index.md]]","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":[]},"/Daily_Notes/2023-05-22":{"title":"May 22, 2023","content":"\n\n## Example Notes\n- a note\n- a note\n\n[notes](obsidian://open?vault=content\u0026file=quartz_template%2FExample_Notes%2FExample%20Notes)\n\n[[_index]]","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":["Daily-Notes"]},"/Example_Notes/Example-Notes":{"title":"Example Note","content":"\n#notes\n\n## An Exmaple note\n- content \n\n\n\n[[_index.md]]","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":["Daily-Notes"]},"/README":{"title":"quartz_template","content":"# quartz_template\nTesting Quartz\n","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":["test"]},"/styleGuides/pyguide":{"title":"pyguide","content":"\u003c!--\nAUTHORS:\nPrefer only GitHub-flavored Markdown in external text.\nSee README.md for details.\n--\u003e\n\n## Gogo Python Style Guide\n\n\u003c!-- markdown=\"1\" is required for GitHub Pages to render the TOC properly. --\u003e\n\n\u003cdetails markdown=\"1\"\u003e\n  \u003csummary\u003eTable of Contents\u003c/summary\u003e\n\n-   [1 Background](#s1-background)\n-   [2 Python Language Rules](#s2-python-language-rules)\n    *   [2.1 Lint](#s2.1-lint)\n    *   [2.2 Imports](#s2.2-imports)\n    *   [2.3 Packages](#s2.3-packages)\n    *   [2.4 Exceptions](#s2.4-exceptions)\n    *   [2.5 Global variables](#s2.5-global-variables)\n    *   [2.6 Nested/Local/Inner Classes and Functions](#s2.6-nested)\n    *   [2.7 Comprehensions \u0026 Generator Expressions](#s2.7-comprehensions)\n    *   [2.8 Default Iterators and Operators](#s2.8-default-iterators-and-operators)\n    *   [2.9 Generators](#s2.9-generators)\n    *   [2.10 Lambda Functions](#s2.10-lambda-functions)\n    *   [2.11 Conditional Expressions](#s2.11-conditional-expressions)\n    *   [2.12 Default Argument Values](#s2.12-default-argument-values)\n    *   [2.13 Properties](#s2.13-properties)\n    *   [2.14 True/False Evaluations](#s2.14-truefalse-evaluations)\n    *   [2.16 Lexical Scoping](#s2.16-lexical-scoping)\n    *   [2.17 Function and Method Decorators](#s2.17-function-and-method-decorators)\n    *   [2.18 Threading](#s2.18-threading)\n    *   [2.19 Power Features](#s2.19-power-features)\n    *   [2.20 Modern Python: from \\_\\_future\\_\\_ imports](#s2.20-modern-python)\n    *   [2.21 Type Annotated Code](#s2.21-type-annotated-code)\n-   [3 Python Style Rules](#s3-python-style-rules)\n    *   [3.1 Semicolons](#s3.1-semicolons)\n    *   [3.2 Line length](#s3.2-line-length)\n    *   [3.3 Parentheses](#s3.3-parentheses)\n    *   [3.4 Indentation](#s3.4-indentation)\n        +   [3.4.1 Trailing commas in sequences of items?](#s3.4.1-trailing-commas)\n    *   [3.5 Blank Lines](#s3.5-blank-lines)\n    *   [3.6 Whitespace](#s3.6-whitespace)\n    *   [3.7 Shebang Line](#s3.7-shebang-line)\n    *   [3.8 Comments and Docstrings](#s3.8-comments-and-docstrings)\n        +   [3.8.1 Docstrings](#s3.8.1-comments-in-doc-strings)\n        +   [3.8.2 Modules](#s3.8.2-comments-in-modules)\n        +   [3.8.3 Functions and Methods](#s3.8.3-functions-and-methods)\n        +   [3.8.4 Classes](#s3.8.4-comments-in-classes)\n        +   [3.8.5 Block and Inline Comments](#s3.8.5-block-and-inline-comments)\n        +   [3.8.6 Punctuation, Spelling, and Grammar](#s3.8.6-punctuation-spelling-and-grammar)\n    *   [3.10 Strings](#s3.10-strings)\n        +   [3.10.1 Logging](#s3.10.1-logging)\n        +   [3.10.2 Error Messages](#s3.10.2-error-messages)\n    *   [3.11 Files, Sockets, and similar Stateful Resources](#s3.11-files-sockets-closeables)\n    *   [3.12 TODO Comments](#s3.12-todo-comments)\n    *   [3.13 Imports formatting](#s3.13-imports-formatting)\n    *   [3.14 Statements](#s3.14-statements)\n    *   [3.15 Accessors](#s3.15-accessors)\n    *   [3.16 Naming](#s3.16-naming)\n        +   [3.16.1 Names to Avoid](#s3.16.1-names-to-avoid)\n        +   [3.16.2 Naming Conventions](#s3.16.2-naming-conventions)\n        +   [3.16.3 File Naming](#s3.16.3-file-naming)\n        +   [3.16.4 Guidelines derived from Guido's Recommendations](#s3.16.4-guidelines-derived-from-guidos-recommendations)\n    *   [3.17 Main](#s3.17-main)\n    *   [3.18 Function length](#s3.18-function-length)\n    *   [3.19 Type Annotations](#s3.19-type-annotations)\n        +   [3.19.1 General Rules](#s3.19.1-general-rules)\n        +   [3.19.2 Line Breaking](#s3.19.2-line-breaking)\n        +   [3.19.3 Forward Declarations](#s3.19.3-forward-declarations)\n        +   [3.19.4 Default Values](#s3.19.4-default-values)\n        +   [3.19.5 NoneType](#s3.19.5-nonetype)\n        +   [3.19.6 Type Aliases](#s3.19.6-type-aliases)\n        +   [3.19.7 Ignoring Types](#s3.19.7-ignoring-types)\n        +   [3.19.8 Typing Variables](#s3.19.8-typing-variables)\n        +   [3.19.9 Tuples vs Lists](#s3.19.9-tuples-vs-lists)\n        +   [3.19.10 TypeVars](#s3.19.10-typevars)\n        +   [3.19.11 String types](#s3.19.11-string-types)\n        +   [3.19.12 Imports For Typing](#s3.19.12-imports-for-typing)\n        +   [3.19.13 Conditional Imports](#s3.19.13-conditional-imports)\n        +   [3.19.14 Circular Dependencies](#s3.19.14-circular-dependencies)\n        +   [3.19.15 Generics](#s3.19.15-generics)\n        +   [3.19.16 Build Dependencies](#s3.19.16-build-dependencies)\n-   [4 Parting Words](#4-parting-words)\n-   [5 Attribution](#5-attribution)\n\n\u003c/details\u003e\n\n\u003ca id=\"s1-background\"\u003e\u003c/a\u003e\n\u003ca id=\"1-background\"\u003e\u003c/a\u003e\n\n\u003ca id=\"background\"\u003e\u003c/a\u003e\n## 1 Background\n\nPython is the main dynamic language used at Google. This style guide is a list\nof *dos and don'ts* for Python programs.\n\nTo help you format code correctly, we've created a [settings file for Vim](google_python_style.vim). For Emacs, the default settings should be fine.\n\nMany teams use the [yapf](https://github.com/google/yapf/)\nauto-formatter to avoid arguing over formatting.\n\n\n\u003ca id=\"s2-python-language-rules\"\u003e\u003c/a\u003e\n\u003ca id=\"2-python-language-rules\"\u003e\u003c/a\u003e\n\n\u003ca id=\"python-language-rules\"\u003e\u003c/a\u003e\n## 2 Python Language Rules\n\n\u003ca id=\"s2.1-lint\"\u003e\u003c/a\u003e\n\u003ca id=\"21-lint\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lint\"\u003e\u003c/a\u003e\n### 2.1 Lint\n\nRun `pylint` over your code using this [pylintrc](https://google.github.io/styleguide/pylintrc).\n\n\u003ca id=\"s2.1.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"211-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lint-definition\"\u003e\u003c/a\u003e\n#### 2.1.1 Definition\n\n`pylint`\nis a tool for finding bugs and style problems in Python source code. It finds\nproblems that are typically caught by a compiler for less dynamic languages like\nC and C++. Because of the dynamic nature of Python, some\nwarnings may be incorrect; however, spurious warnings should be fairly\ninfrequent.\n\n\u003ca id=\"s2.1.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"212-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lint-pros\"\u003e\u003c/a\u003e\n#### 2.1.2 Pros\n\nCatches easy-to-miss errors like typos, using-vars-before-assignment, etc.\n\n\u003ca id=\"s2.1.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"213-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lint-cons\"\u003e\u003c/a\u003e\n#### 2.1.3 Cons\n\n`pylint`\nisn't perfect. To take advantage of it, sometimes we'll need to write around it,\nsuppress its warnings or fix it.\n\n\u003ca id=\"s2.1.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"214-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lint-decision\"\u003e\u003c/a\u003e\n#### 2.1.4 Decision\n\nMake sure you run\n`pylint`\non your code.\n\n\nSuppress warnings if they are inappropriate so that other issues are not hidden.\nTo suppress warnings, you can set a line-level comment:\n\n```python\ndict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin\n```\n\n`pylint`\nwarnings are each identified by symbolic name (`empty-docstring`)\nGoogle-specific warnings start with `g-`.\n\nIf the reason for the suppression is not clear from the symbolic name, add an\nexplanation.\n\nSuppressing in this way has the advantage that we can easily search for\nsuppressions and revisit them.\n\nYou can get a list of\n`pylint`\nwarnings by doing:\n\n```shell\npylint --list-msgs\n```\n\nTo get more information on a particular message, use:\n\n```shell\npylint --help-msg=C6409\n```\n\nPrefer `pylint: disable` to the deprecated older form `pylint: disable-msg`.\n\nUnused argument warnings can be suppressed by deleting the variables at the\nbeginning of the function. Always include a comment explaining why you are\ndeleting it. \"Unused.\" is sufficient. For example:\n\n```python\ndef viking_cafe_order(spam: str, beans: str, eggs: Optional[str] = None) -\u003e str:\n    del beans, eggs  # Unused by vikings.\n    return spam + spam + spam\n```\n\nOther common forms of suppressing this warning include using '`_`' as the\nidentifier for the unused argument or prefixing the argument name with\n'`unused_`', or assigning them to '`_`'. These forms are allowed but no longer\nencouraged. These break callers that pass arguments by name and do not enforce\nthat the arguments are actually unused.\n\n\u003ca id=\"s2.2-imports\"\u003e\u003c/a\u003e\n\u003ca id=\"22-imports\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports\"\u003e\u003c/a\u003e\n### 2.2 Imports\n\nUse `import` statements for packages and modules only, not for individual\nclasses or functions. Classes imported from the\n[typing module](#typing-imports),\n[typing_extensions module](https://github.com/python/typing/tree/master/typing_extensions),\nand redirects from the\n[six.moves module](https://six.readthedocs.io/#module-six.moves)\nare exempt from this rule.\n\n\u003ca id=\"s2.2.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"221-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports-definition\"\u003e\u003c/a\u003e\n#### 2.2.1 Definition\n\nReusability mechanism for sharing code from one module to another.\n\n\u003ca id=\"s2.2.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"222-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports-pros\"\u003e\u003c/a\u003e\n#### 2.2.2 Pros\n\nThe namespace management convention is simple. The source of each identifier is\nindicated in a consistent way; `x.Obj` says that object `Obj` is defined in\nmodule `x`.\n\n\u003ca id=\"s2.2.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"223-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports-cons\"\u003e\u003c/a\u003e\n#### 2.2.3 Cons\n\nModule names can still collide. Some module names are inconveniently long.\n\n\u003ca id=\"s2.2.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"224-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports-decision\"\u003e\u003c/a\u003e\n#### 2.2.4 Decision\n\n*   Use `import x` for importing packages and modules.\n*   Use `from x import y` where `x` is the package prefix and `y` is the module\n    name with no prefix.\n*   Use `from x import y as z` if two modules named `y` are to be imported or if\n    `y` is an inconveniently long name.\n*   Use `import y as z` only when `z` is a standard abbreviation (e.g., `np` for\n    `numpy`).\n\nFor example the module `sound.effects.echo` may be imported as follows:\n\n```python\nfrom sound.effects import echo\n...\necho.EchoFilter(input, output, delay=0.7, atten=4)\n```\n\nDo not use relative names in imports. Even if the module is in the same package,\nuse the full package name. This helps prevent unintentionally importing a\npackage twice.\n\n\u003ca id=\"s2.3-packages\"\u003e\u003c/a\u003e\n\u003ca id=\"23-packages\"\u003e\u003c/a\u003e\n\n\u003ca id=\"packages\"\u003e\u003c/a\u003e\n### 2.3 Packages\n\nImport each module using the full pathname location of the module.\n\n\u003ca id=\"s2.3.1-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"231-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"packages-pros\"\u003e\u003c/a\u003e\n#### 2.3.1 Pros\n\nAvoids conflicts in module names or incorrect imports due to the module search\npath not being what the author expected. Makes it easier to find modules.\n\n\u003ca id=\"s2.3.2-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"232-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"packages-cons\"\u003e\u003c/a\u003e\n#### 2.3.2 Cons\n\nMakes it harder to deploy code because you have to replicate the package\nhierarchy. Not really a problem with modern deployment mechanisms.\n\n\u003ca id=\"s2.3.3-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"233-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"packages-decision\"\u003e\u003c/a\u003e\n#### 2.3.3 Decision\n\nAll new code should import each module by its full package name.\n\nImports should be as follows:\n\n```python\nYes:\n  # Reference absl.flags in code with the complete name (verbose).\n  import absl.flags\n  from doctor.who import jodie\n\n  FLAGS = absl.flags.FLAGS\n```\n\n```python\nYes:\n  # Reference flags in code with just the module name (common).\n  from absl import flags\n  from doctor.who import jodie\n\n  FLAGS = flags.FLAGS\n```\n\n*(assume this file lives in `doctor/who/` where `jodie.py` also exists)*\n\n```python\nNo:\n  # Unclear what module the author wanted and what will be imported.  The actual\n  # import behavior depends on external factors controlling sys.path.\n  # Which possible jodie module did the author intend to import?\n  import jodie\n```\n\nThe directory the main binary is located in should not be assumed to be in\n`sys.path` despite that happening in some environments. This being the case,\ncode should assume that `import jodie` refers to a third party or top level\npackage named `jodie`, not a local `jodie.py`.\n\n\n\u003ca id=\"s2.4-exceptions\"\u003e\u003c/a\u003e\n\u003ca id=\"24-exceptions\"\u003e\u003c/a\u003e\n\n\u003ca id=\"exceptions\"\u003e\u003c/a\u003e\n### 2.4 Exceptions\n\nExceptions are allowed but must be used carefully.\n\n\u003ca id=\"s2.4.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"241-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"exceptions-definition\"\u003e\u003c/a\u003e\n#### 2.4.1 Definition\n\nExceptions are a means of breaking out of normal control flow to handle errors\nor other exceptional conditions.\n\n\u003ca id=\"s2.4.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"242-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"exceptions-pros\"\u003e\u003c/a\u003e\n#### 2.4.2 Pros\n\nThe control flow of normal operation code is not cluttered by error-handling\ncode. It also allows the control flow to skip multiple frames when a certain\ncondition occurs, e.g., returning from N nested functions in one step instead of\nhaving to plumb error codes through.\n\n\u003ca id=\"s2.4.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"243-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"exceptions-cons\"\u003e\u003c/a\u003e\n#### 2.4.3 Cons\n\nMay cause the control flow to be confusing. Easy to miss error cases when making\nlibrary calls.\n\n\u003ca id=\"s2.4.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"244-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"exceptions-decision\"\u003e\u003c/a\u003e\n#### 2.4.4 Decision\n\nExceptions must follow certain conditions:\n\n-   Make use of built-in exception classes when it makes sense. For example,\n    raise a `ValueError` to indicate a programming mistake like a violated\n    precondition (such as if you were passed a negative number but required a\n    positive one). Do not use `assert` statements for validating argument values\n    of a public API. `assert` is used to ensure internal correctness, not to\n    enforce correct usage nor to indicate that some unexpected event occurred.\n    If an exception is desired in the latter cases, use a raise statement. For\n    example:\n\n    \n    ```python\n    Yes:\n      def connect_to_next_port(self, minimum: int) -\u003e int:\n        \"\"\"Connects to the next available port.\n\n        Args:\n          minimum: A port value greater or equal to 1024.\n\n        Returns:\n          The new minimum port.\n\n        Raises:\n          ConnectionError: If no available port is found.\n        \"\"\"\n        if minimum \u003c 1024:\n          # Note that this raising of ValueError is not mentioned in the doc\n          # string's \"Raises:\" section because it is not appropriate to\n          # guarantee this specific behavioral reaction to API misuse.\n          raise ValueError(f'Min. port must be at least 1024, not {minimum}.')\n        port = self._find_next_open_port(minimum)\n        if not port:\n          raise ConnectionError(\n              f'Could not connect to service on port {minimum} or higher.')\n        assert port \u003e= minimum, (\n            f'Unexpected port {port} when minimum was {minimum}.')\n        return port\n    ```\n\n    ```python\n    No:\n      def connect_to_next_port(self, minimum: int) -\u003e int:\n        \"\"\"Connects to the next available port.\n\n        Args:\n          minimum: A port value greater or equal to 1024.\n\n        Returns:\n          The new minimum port.\n        \"\"\"\n        assert minimum \u003e= 1024, 'Minimum port must be at least 1024.'\n        port = self._find_next_open_port(minimum)\n        assert port is not None\n        return port\n    ```\n\n\n-   Libraries or packages may define their own exceptions. When doing so they\n    must inherit from an existing exception class. Exception names should end in\n    `Error` and should not introduce repetition (`foo.FooError`).\n\n-   Never use catch-all `except:` statements, or catch `Exception` or\n    `StandardError`, unless you are\n\n    -   re-raising the exception, or\n    -   creating an isolation point in the program where exceptions are not\n        propagated but are recorded and suppressed instead, such as protecting a\n        thread from crashing by guarding its outermost block.\n\n    Python is very tolerant in this regard and `except:` will really catch\n    everything including misspelled names, sys.exit() calls, Ctrl+C interrupts,\n    unittest failures and all kinds of other exceptions that you simply don't\n    want to catch.\n\n-   Minimize the amount of code in a `try`/`except` block. The larger the body\n    of the `try`, the more likely that an exception will be raised by a line of\n    code that you didn't expect to raise an exception. In those cases, the\n    `try`/`except` block hides a real error.\n\n-   Use the `finally` clause to execute code whether or not an exception is\n    raised in the `try` block. This is often useful for cleanup, i.e., closing a\n    file.\n\n\u003ca id=\"s2.5-global-variables\"\u003e\u003c/a\u003e\n\u003ca id=\"25-global-variables\"\u003e\u003c/a\u003e\n\n\u003ca id=\"global-variables\"\u003e\u003c/a\u003e\n### 2.5 Global variables\n\nAvoid global variables.\n\n\u003ca id=\"s2.5.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"251-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"global-variables-definition\"\u003e\u003c/a\u003e\n#### 2.5.1 Definition\n\nVariables that are declared at the module level or as class attributes.\n\n\u003ca id=\"s2.5.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"252-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"global-variables-pros\"\u003e\u003c/a\u003e\n#### 2.5.2 Pros\n\nOccasionally useful.\n\n\u003ca id=\"s2.5.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"253-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"global-variables-cons\"\u003e\u003c/a\u003e\n#### 2.5.3 Cons\n\nHas the potential to change module behavior during the import, because\nassignments to global variables are done when the module is first imported.\n\n\u003ca id=\"s2.5.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"254-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"global-variables-decision\"\u003e\u003c/a\u003e\n#### 2.5.4 Decision\n\nAvoid global variables.\n\nWhile they are technically variables, module-level constants are permitted and\nencouraged. For example: `_MAX_HOLY_HANDGRENADE_COUNT = 3`. Constants must be\nnamed using all caps with underscores. See [Naming](#s3.16-naming) below.\n\nIf needed, globals should be declared at the module level and made internal to\nthe module by prepending an `_` to the name. External access must be done\nthrough public module-level functions. See [Naming](#s3.16-naming) below.\n\n\u003ca id=\"s2.6-nested\"\u003e\u003c/a\u003e\n\u003ca id=\"26-nested\"\u003e\u003c/a\u003e\n\n\u003ca id=\"nested-classes-functions\"\u003e\u003c/a\u003e\n### 2.6 Nested/Local/Inner Classes and Functions\n\nNested local functions or classes are fine when used to close over a local\nvariable. Inner classes are fine.\n\n\u003ca id=\"s2.6.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"261-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"nested-classes-functions-definition\"\u003e\u003c/a\u003e\n#### 2.6.1 Definition\n\nA class can be defined inside of a method, function, or class. A function can be\ndefined inside a method or function. Nested functions have read-only access to\nvariables defined in enclosing scopes.\n\n\u003ca id=\"s2.6.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"262-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"nested-classes-functions-pros\"\u003e\u003c/a\u003e\n#### 2.6.2 Pros\n\nAllows definition of utility classes and functions that are only used inside of\na very limited scope. Very\n[ADT](http://www.google.com/url?sa=D\u0026q=http://en.wikipedia.org/wiki/Abstract_data_type)-y.\nCommonly used for implementing decorators.\n\n\u003ca id=\"s2.6.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"263-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"nested-classes-functions-cons\"\u003e\u003c/a\u003e\n#### 2.6.3 Cons\n\nNested functions and classes cannot be directly tested. Nesting can make the\nouter function longer and less readable.\n\n\u003ca id=\"s2.6.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"264-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"nested-classes-functions-decision\"\u003e\u003c/a\u003e\n#### 2.6.4 Decision\n\nThey are fine with some caveats. Avoid nested functions or classes except when\nclosing over a local value other than `self` or `cls`. Do not nest a function\njust to hide it from users of a module. Instead, prefix its name with an \\_ at\nthe module level so that it can still be accessed by tests.\n\n\u003ca id=\"s2.7-comprehensions\"\u003e\u003c/a\u003e\n\u003ca id=\"s2.7-list_comprehensions\"\u003e\u003c/a\u003e\n\u003ca id=\"27-list_comprehensions\"\u003e\u003c/a\u003e\n\u003ca id=\"list_comprehensions\"\u003e\u003c/a\u003e\n\u003ca id=\"list-comprehensions\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comprehensions\"\u003e\u003c/a\u003e\n### 2.7 Comprehensions \u0026 Generator Expressions\n\nOkay to use for simple cases.\n\n\u003ca id=\"s2.7.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"271-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comprehensions-definition\"\u003e\u003c/a\u003e\n#### 2.7.1 Definition\n\nList, Dict, and Set comprehensions as well as generator expressions provide a\nconcise and efficient way to create container types and iterators without\nresorting to the use of traditional loops, `map()`, `filter()`, or `lambda`.\n\n\u003ca id=\"s2.7.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"272-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comprehensions-pros\"\u003e\u003c/a\u003e\n#### 2.7.2 Pros\n\nSimple comprehensions can be clearer and simpler than other dict, list, or set\ncreation techniques. Generator expressions can be very efficient, since they\navoid the creation of a list entirely.\n\n\u003ca id=\"s2.7.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"273-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comprehensions-cons\"\u003e\u003c/a\u003e\n#### 2.7.3 Cons\n\nComplicated comprehensions or generator expressions can be hard to read.\n\n\u003ca id=\"s2.7.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"274-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comprehensions-decision\"\u003e\u003c/a\u003e\n#### 2.7.4 Decision\n\nOkay to use for simple cases. Each portion must fit on one line: mapping\nexpression, `for` clause, filter expression. Multiple `for` clauses or filter\nexpressions are not permitted. Use loops instead when things get more\ncomplicated.\n\n```python\nYes:\n  result = [mapping_expr for value in iterable if filter_expr]\n\n  result = [{'key': value} for value in iterable\n            if a_long_filter_expression(value)]\n\n  result = [complicated_transform(x)\n            for x in iterable if predicate(x)]\n\n  descriptive_name = [\n      transform({'key': key, 'value': value}, color='black')\n      for key, value in generate_iterable(some_input)\n      if complicated_condition_is_met(key, value)\n  ]\n\n  result = []\n  for x in range(10):\n      for y in range(5):\n          if x * y \u003e 10:\n              result.append((x, y))\n\n  return {x: complicated_transform(x)\n          for x in long_generator_function(parameter)\n          if x is not None}\n\n  squares_generator = (x**2 for x in range(10))\n\n  unique_names = {user.name for user in users if user is not None}\n\n  eat(jelly_bean for jelly_bean in jelly_beans\n      if jelly_bean.color == 'black')\n```\n\n```python\nNo:\n  result = [complicated_transform(\n                x, some_argument=x+1)\n            for x in iterable if predicate(x)]\n\n  result = [(x, y) for x in range(10) for y in range(5) if x * y \u003e 10]\n\n  return ((x, y, z)\n          for x in range(5)\n          for y in range(5)\n          if x != y\n          for z in range(5)\n          if y != z)\n```\n\n\u003ca id=\"s2.8-default-iterators-and-operators\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-iterators-operators\"\u003e\u003c/a\u003e\n### 2.8 Default Iterators and Operators\n\nUse default iterators and operators for types that support them, like lists,\ndictionaries, and files.\n\n\u003ca id=\"s2.8.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"281-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-iterators-operators-definition\"\u003e\u003c/a\u003e\n#### 2.8.1 Definition\n\nContainer types, like dictionaries and lists, define default iterators and\nmembership test operators (\"in\" and \"not in\").\n\n\u003ca id=\"s2.8.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"282-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-iterators-operators-pros\"\u003e\u003c/a\u003e\n#### 2.8.2 Pros\n\nThe default iterators and operators are simple and efficient. They express the\noperation directly, without extra method calls. A function that uses default\noperators is generic. It can be used with any type that supports the operation.\n\n\u003ca id=\"s2.8.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"283-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-iterators-operators-cons\"\u003e\u003c/a\u003e\n#### 2.8.3 Cons\n\nYou can't tell the type of objects by reading the method names (e.g. `has_key()`\nmeans a dictionary). This is also an advantage.\n\n\u003ca id=\"s2.8.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"284-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-iterators-operators-decision\"\u003e\u003c/a\u003e\n#### 2.8.4 Decision\n\nUse default iterators and operators for types that support them, like lists,\ndictionaries, and files. The built-in types define iterator methods, too. Prefer\nthese methods to methods that return lists, except that you should not mutate a\ncontainer while iterating over it.\n\n```python\nYes:  for key in adict: ...\n      if key not in adict: ...\n      if obj in alist: ...\n      for line in afile: ...\n      for k, v in adict.items(): ...\n      for k, v in six.iteritems(adict): ...\n```\n\n```python\nNo:   for key in adict.keys(): ...\n      if not adict.has_key(key): ...\n      for line in afile.readlines(): ...\n      for k, v in dict.iteritems(): ...\n```\n\n\u003ca id=\"s2.9-generators\"\u003e\u003c/a\u003e\n\u003ca id=\"29-generators\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generators\"\u003e\u003c/a\u003e\n### 2.9 Generators\n\nUse generators as needed.\n\n\u003ca id=\"s2.9.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"291-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generators-definition\"\u003e\u003c/a\u003e\n#### 2.9 Definition\n\nA generator function returns an iterator that yields a value each time it\nexecutes a yield statement. After it yields a value, the runtime state of the\ngenerator function is suspended until the next value is needed.\n\n\u003ca id=\"s2.9.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"292-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generators-pros\"\u003e\u003c/a\u003e\n#### 2.9.2 Pros\n\nSimpler code, because the state of local variables and control flow are\npreserved for each call. A generator uses less memory than a function that\ncreates an entire list of values at once.\n\n\u003ca id=\"s2.9.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"293-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generators-cons\"\u003e\u003c/a\u003e\n#### 2.9.3 Cons\n\nNone.\n\n\u003ca id=\"s2.9.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"294-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generators-decision\"\u003e\u003c/a\u003e\n#### 2.9.4 Decision\n\nFine. Use \"Yields:\" rather than \"Returns:\" in the docstring for generator\nfunctions.\n\n\u003ca id=\"s2.10-lambda-functions\"\u003e\u003c/a\u003e\n\u003ca id=\"210-lambda-functions\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lambdas\"\u003e\u003c/a\u003e\n### 2.10 Lambda Functions\n\nOkay for one-liners. Prefer generator expressions over `map()` or `filter()`\nwith a `lambda`.\n\n\u003ca id=\"s2.10.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2101-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lambdas-definition\"\u003e\u003c/a\u003e\n#### 2.10.1 Definition\n\nLambdas define anonymous functions in an expression, as opposed to a statement.\n\n\u003ca id=\"s2.10.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2102-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lambdas-pros\"\u003e\u003c/a\u003e\n#### 2.10.2 Pros\n\nConvenient.\n\n\u003ca id=\"s2.10.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2103-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lambdas-cons\"\u003e\u003c/a\u003e\n#### 2.10.3 Cons\n\nHarder to read and debug than local functions. The lack of names means stack\ntraces are more difficult to understand. Expressiveness is limited because the\nfunction may only contain an expression.\n\n\u003ca id=\"s2.10.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2104-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lambdas-decision\"\u003e\u003c/a\u003e\n#### 2.10.4 Decision\n\nOkay to use them for one-liners. If the code inside the lambda function is\nlonger than 60-80 chars, it's probably better to define it as a regular\n[nested function](#lexical-scoping).\n\nFor common operations like multiplication, use the functions from the `operator`\nmodule instead of lambda functions. For example, prefer `operator.mul` to\n`lambda x, y: x * y`.\n\n\u003ca id=\"s2.11-conditional-expressions\"\u003e\u003c/a\u003e\n\u003ca id=\"211-conditional-expressions\"\u003e\u003c/a\u003e\n\n\u003ca id=\"conditional-expressions\"\u003e\u003c/a\u003e\n### 2.11 Conditional Expressions\n\nOkay for simple cases.\n\n\u003ca id=\"s2.11.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2111-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"conditional-expressions-definition\"\u003e\u003c/a\u003e\n#### 2.11.1 Definition\n\nConditional expressions (sometimes called a “ternary operator”) are mechanisms\nthat provide a shorter syntax for if statements. For example: `x = 1 if cond\nelse 2`.\n\n\u003ca id=\"s2.11.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2112-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"conditional-expressions-pros\"\u003e\u003c/a\u003e\n#### 2.11.2 Pros\n\nShorter and more convenient than an if statement.\n\n\u003ca id=\"s2.11.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2113-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"conditional-expressions-cons\"\u003e\u003c/a\u003e\n#### 2.11.3 Cons\n\nMay be harder to read than an if statement. The condition may be difficult to\nlocate if the expression is long.\n\n\u003ca id=\"s2.11.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2114-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"conditional-expressions-decision\"\u003e\u003c/a\u003e\n#### 2.11.4 Decision\n\nOkay to use for simple cases. Each portion must fit on one line:\ntrue-expression, if-expression, else-expression. Use a complete if statement\nwhen things get more complicated.\n\n```python\nYes:\n    one_line = 'yes' if predicate(value) else 'no'\n    slightly_split = ('yes' if predicate(value)\n                      else 'no, nein, nyet')\n    the_longest_ternary_style_that_can_be_done = (\n        'yes, true, affirmative, confirmed, correct'\n        if predicate(value)\n        else 'no, false, negative, nay')\n```\n\n```python\nNo:\n    bad_line_breaking = ('yes' if predicate(value) else\n                         'no')\n    portion_too_long = ('yes'\n                        if some_long_module.some_long_predicate_function(\n                            really_long_variable_name)\n                        else 'no, false, negative, nay')\n```\n\n\u003ca id=\"s2.12-default-argument-values\"\u003e\u003c/a\u003e\n\u003ca id=\"212-default-argument-values\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-arguments\"\u003e\u003c/a\u003e\n### 2.12 Default Argument Values\n\nOkay in most cases.\n\n\u003ca id=\"s2.12.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2121-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-arguments-definition\"\u003e\u003c/a\u003e\n#### 2.12.1 Definition\n\nYou can specify values for variables at the end of a function's parameter list,\ne.g., `def foo(a, b=0):`. If `foo` is called with only one argument, `b` is set\nto 0. If it is called with two arguments, `b` has the value of the second\nargument.\n\n\u003ca id=\"s2.12.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2122-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-arguments-pros\"\u003e\u003c/a\u003e\n#### 2.12.2 Pros\n\nOften you have a function that uses lots of default values, but on rare\noccasions you want to override the defaults. Default argument values provide an\neasy way to do this, without having to define lots of functions for the rare\nexceptions. As Python does not support overloaded methods/functions, default\narguments are an easy way of \"faking\" the overloading behavior.\n\n\u003ca id=\"s2.12.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2123-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-arguments-cons\"\u003e\u003c/a\u003e\n#### 2.12.3 Cons\n\nDefault arguments are evaluated once at module load time. This may cause\nproblems if the argument is a mutable object such as a list or a dictionary. If\nthe function modifies the object (e.g., by appending an item to a list), the\ndefault value is modified.\n\n\u003ca id=\"s2.12.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2124-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"default-arguments-decision\"\u003e\u003c/a\u003e\n#### 2.12.4 Decision\n\nOkay to use with the following caveat:\n\nDo not use mutable objects as default values in the function or method\ndefinition.\n\n```python\nYes: def foo(a, b=None):\n         if b is None:\n             b = []\nYes: def foo(a, b: Optional[Sequence] = None):\n         if b is None:\n             b = []\nYes: def foo(a, b: Sequence = ()):  # Empty tuple OK since tuples are immutable\n         ...\n```\n\n```python\nNo:  def foo(a, b=[]):\n         ...\nNo:  def foo(a, b=time.time()):  # The time the module was loaded???\n         ...\nNo:  def foo(a, b=FLAGS.my_thing):  # sys.argv has not yet been parsed...\n         ...\nNo:  def foo(a, b: Mapping = {}):  # Could still get passed to unchecked code\n         ...\n```\n\n\u003ca id=\"s2.13-properties\"\u003e\u003c/a\u003e\n\u003ca id=\"213-properties\"\u003e\u003c/a\u003e\n\n\u003ca id=\"properties\"\u003e\u003c/a\u003e\n### 2.13 Properties\n\nProperties may be used to control getting or setting attributes that require\ntrivial computations or logic. Property implementations must match the general\nexpectations of regular attribute access: that they are cheap, straightforward,\nand unsurprising.\n\n\u003ca id=\"s2.13.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2131-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"properties-definition\"\u003e\u003c/a\u003e\n#### 2.13.1 Definition\n\nA way to wrap method calls for getting and setting an attribute as a standard\nattribute access.\n\n\u003ca id=\"s2.13.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2132-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"properties-pros\"\u003e\u003c/a\u003e\n#### 2.13.2 Pros\n\n*   Allows for an attribute access and assignment API rather than\n    [getter and setter](#getters-and-setters) method calls.\n*   Can be used to make an attribute read-only.\n*   Allows calculations to be lazy.\n*   Provides a way to maintain the public interface of a class when the\n    internals evolve independently of class users.\n\n\u003ca id=\"s2.13.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2133-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"properties-cons\"\u003e\u003c/a\u003e\n#### 2.13.3 Cons\n\n*   Can hide side-effects much like operator overloading.\n*   Can be confusing for subclasses.\n\n\u003ca id=\"s2.13.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2134-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"properties-decision\"\u003e\u003c/a\u003e\n#### 2.13.4 Decision\n\nProperties are allowed, but, like operator overloading, should only be used when\nnecessary and match the expectations of typical attribute access; follow the\n[getters and setters](#getters-and-setters) rules otherwise.\n\nFor example, using a property to simply both get and set an internal attribute\nisn't allowed: there is no computation occurring, so the property is unnecessary\n([make the attribute public instead](#getters-and-setters)). In comparison,\nusing a property to control attribute access or to calculate a *trivially*\nderived value is allowed: the logic is simple and unsurprising.\n\nProperties should be created with the `@property`\n[decorator](#s2.17-function-and-method-decorators). Manually implementing a\nproperty descriptor is considered a [power feature](#power-features).\n\nInheritance with properties can be non-obvious. Do not use properties to\nimplement computations a subclass may ever want to override and extend.\n\n\u003ca id=\"s2.14-truefalse-evaluations\"\u003e\u003c/a\u003e\n\u003ca id=\"214-truefalse-evaluations\"\u003e\u003c/a\u003e\n\n\u003ca id=\"truefalse-evaluations\"\u003e\u003c/a\u003e\n### 2.14 True/False Evaluations\n\nUse the \"implicit\" false if at all possible.\n\n\u003ca id=\"s2.14.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2141-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"truefalse-evaluations-definition\"\u003e\u003c/a\u003e\n#### 2.14.1 Definition\n\nPython evaluates certain values as `False` when in a boolean context. A quick\n\"rule of thumb\" is that all \"empty\" values are considered false, so `0, None,\n[], {}, ''` all evaluate as false in a boolean context.\n\n\u003ca id=\"s2.14.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2142-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"truefalse-evaluations-pros\"\u003e\u003c/a\u003e\n#### 2.14.2 Pros\n\nConditions using Python booleans are easier to read and less error-prone. In\nmost cases, they're also faster.\n\n\u003ca id=\"s2.14.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2143-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"truefalse-evaluations-cons\"\u003e\u003c/a\u003e\n#### 2.14.3 Cons\n\nMay look strange to C/C++ developers.\n\n\u003ca id=\"s2.14.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2144-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"truefalse-evaluations-decision\"\u003e\u003c/a\u003e\n#### 2.14.4 Decision\n\nUse the \"implicit\" false if possible, e.g., `if foo:` rather than `if foo !=\n[]:`. There are a few caveats that you should keep in mind though:\n\n-   Always use `if foo is None:` (or `is not None`) to check for a `None` value.\n    E.g., when testing whether a variable or argument that defaults to `None`\n    was set to some other value. The other value might be a value that's false\n    in a boolean context!\n\n-   Never compare a boolean variable to `False` using `==`. Use `if not x:`\n    instead. If you need to distinguish `False` from `None` then chain the\n    expressions, such as `if not x and x is not None:`.\n\n-   For sequences (strings, lists, tuples), use the fact that empty sequences\n    are false, so `if seq:` and `if not seq:` are preferable to `if len(seq):`\n    and `if not len(seq):` respectively.\n\n-   When handling integers, implicit false may involve more risk than benefit\n    (i.e., accidentally handling `None` as 0). You may compare a value which is\n    known to be an integer (and is not the result of `len()`) against the\n    integer 0.\n\n    ```python\n    Yes: if not users:\n             print('no users')\n\n         if i % 10 == 0:\n             self.handle_multiple_of_ten()\n\n         def f(x=None):\n             if x is None:\n                 x = []\n    ```\n\n    ```python\n    No:  if len(users) == 0:\n             print('no users')\n\n         if not i % 10:\n             self.handle_multiple_of_ten()\n\n         def f(x=None):\n             x = x or []\n    ```\n\n-   Note that `'0'` (i.e., `0` as string) evaluates to true.\n\n-   Note that Numpy arrays may raise an exception in an implicit boolean\n    context. Prefer the `.size` attribute when testing emptiness of a `np.array`\n    (e.g. `if not users.size`).\n\n\u003ca id=\"s2.16-lexical-scoping\"\u003e\u003c/a\u003e\n\u003ca id=\"216-lexical-scoping\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lexical-scoping\"\u003e\u003c/a\u003e\n### 2.16 Lexical Scoping\n\nOkay to use.\n\n\u003ca id=\"s2.16.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2161-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lexical-scoping-definition\"\u003e\u003c/a\u003e\n#### 2.16.1 Definition\n\nA nested Python function can refer to variables defined in enclosing functions,\nbut cannot assign to them. Variable bindings are resolved using lexical scoping,\nthat is, based on the static program text. Any assignment to a name in a block\nwill cause Python to treat all references to that name as a local variable, even\nif the use precedes the assignment. If a global declaration occurs, the name is\ntreated as a global variable.\n\nAn example of the use of this feature is:\n\n```python\ndef get_adder(summand1: float) -\u003e Callable[[float], float]:\n    \"\"\"Returns a function that adds numbers to a given number.\"\"\"\n    def adder(summand2: float) -\u003e float:\n        return summand1 + summand2\n\n    return adder\n```\n\n\u003ca id=\"s2.16.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2162-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lexical-scoping-pros\"\u003e\u003c/a\u003e\n#### 2.16.2 Pros\n\nOften results in clearer, more elegant code. Especially comforting to\nexperienced Lisp and Scheme (and Haskell and ML and ...) programmers.\n\n\u003ca id=\"s2.16.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2163-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lexical-scoping-cons\"\u003e\u003c/a\u003e\n#### 2.16.3 Cons\n\nCan lead to confusing bugs. Such as this example based on\n[PEP-0227](http://www.google.com/url?sa=D\u0026q=http://www.python.org/dev/peps/pep-0227/):\n\n```python\ni = 4\ndef foo(x: Iterable[int]):\n    def bar():\n        print(i, end='')\n    # ...\n    # A bunch of code here\n    # ...\n    for i in x:  # Ah, i *is* local to foo, so this is what bar sees\n        print(i, end='')\n    bar()\n```\n\nSo `foo([1, 2, 3])` will print `1 2 3 3`,\nnot `1 2 3 4`.\n\n\u003ca id=\"s2.16.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2164-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"lexical-scoping-decision\"\u003e\u003c/a\u003e\n#### 2.16.4 Decision\n\nOkay to use.\n\n\u003ca id=\"s2.17-function-and-method-decorators\"\u003e\u003c/a\u003e\n\u003ca id=\"217-function-and-method-decorators\"\u003e\u003c/a\u003e\n\u003ca id=\"function-and-method-decorators\"\u003e\u003c/a\u003e\n\n\u003ca id=\"decorators\"\u003e\u003c/a\u003e\n### 2.17 Function and Method Decorators\n\nUse decorators judiciously when there is a clear advantage. Avoid `staticmethod`\nand limit use of `classmethod`.\n\n\u003ca id=\"s2.17.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2171-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"decorators-definition\"\u003e\u003c/a\u003e\n#### 2.17.1 Definition\n\n[Decorators for Functions and Methods](https://docs.python.org/3/glossary.html#term-decorator)\n(a.k.a \"the `@` notation\"). One common decorator is `@property`, used for\nconverting ordinary methods into dynamically computed attributes. However, the\ndecorator syntax allows for user-defined decorators as well. Specifically, for\nsome function `my_decorator`, this:\n\n```python\nclass C:\n    @my_decorator\n    def method(self):\n        # method body ...\n```\n\nis equivalent to:\n\n```python\nclass C:\n    def method(self):\n        # method body ...\n    method = my_decorator(method)\n```\n\n\u003ca id=\"s2.17.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2172-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"decorators-pros\"\u003e\u003c/a\u003e\n#### 2.17.2 Pros\n\nElegantly specifies some transformation on a method; the transformation might\neliminate some repetitive code, enforce invariants, etc.\n\n\u003ca id=\"s2.17.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2173-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"decorators-cons\"\u003e\u003c/a\u003e\n#### 2.17.3 Cons\n\nDecorators can perform arbitrary operations on a function's arguments or return\nvalues, resulting in surprising implicit behavior. Additionally, decorators\nexecute at object definition time. For module-level objects (classes, module\nfunctions, ...) this happens at import time. Failures in decorator code are\npretty much impossible to recover from.\n\n\u003ca id=\"s2.17.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2174-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"decorators-decision\"\u003e\u003c/a\u003e\n#### 2.17.4 Decision\n\nUse decorators judiciously when there is a clear advantage. Decorators should\nfollow the same import and naming guidelines as functions. Decorator pydoc\nshould clearly state that the function is a decorator. Write unit tests for\ndecorators.\n\nAvoid external dependencies in the decorator itself (e.g. don't rely on files,\nsockets, database connections, etc.), since they might not be available when the\ndecorator runs (at import time, perhaps from `pydoc` or other tools). A\ndecorator that is called with valid parameters should (as much as possible) be\nguaranteed to succeed in all cases.\n\nDecorators are a special case of \"top level code\" - see [main](#s3.17-main) for\nmore discussion.\n\nNever use `staticmethod` unless forced to in order to integrate with an API\ndefined in an existing library. Write a module level function instead.\n\nUse `classmethod` only when writing a named constructor or a class-specific\nroutine that modifies necessary global state such as a process-wide cache.\n\n\u003ca id=\"s2.18-threading\"\u003e\u003c/a\u003e\n\u003ca id=\"218-threading\"\u003e\u003c/a\u003e\n\n\u003ca id=\"threading\"\u003e\u003c/a\u003e\n### 2.18 Threading\n\nDo not rely on the atomicity of built-in types.\n\nWhile Python's built-in data types such as dictionaries appear to have atomic\noperations, there are corner cases where they aren't atomic (e.g. if `__hash__`\nor `__eq__` are implemented as Python methods) and their atomicity should not be\nrelied upon. Neither should you rely on atomic variable assignment (since this\nin turn depends on dictionaries).\n\nUse the Queue module's `Queue` data type as the preferred way to communicate\ndata between threads. Otherwise, use the threading module and its locking\nprimitives. Prefer condition variables and `threading.Condition` instead of\nusing lower-level locks.\n\n\u003ca id=\"s2.19-power-features\"\u003e\u003c/a\u003e\n\u003ca id=\"219-power-features\"\u003e\u003c/a\u003e\n\n\u003ca id=\"power-features\"\u003e\u003c/a\u003e\n### 2.19 Power Features\n\nAvoid these features.\n\n\u003ca id=\"s2.19.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2191-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"power-features-definition\"\u003e\u003c/a\u003e\n#### 2.19.1 Definition\n\nPython is an extremely flexible language and gives you many fancy features such\nas custom metaclasses, access to bytecode, on-the-fly compilation, dynamic\ninheritance, object reparenting, import hacks, reflection (e.g. some uses of\n`getattr()`), modification of system internals, `__del__` methods implementing\ncustomized cleanup, etc.\n\n\u003ca id=\"s2.19.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2192-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"power-features-pros\"\u003e\u003c/a\u003e\n#### 2.19.2 Pros\n\nThese are powerful language features. They can make your code more compact.\n\n\u003ca id=\"s2.19.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2193-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"power-features-cons\"\u003e\u003c/a\u003e\n#### 2.19.3 Cons\n\nIt's very tempting to use these \"cool\" features when they're not absolutely\nnecessary. It's harder to read, understand, and debug code that's using unusual\nfeatures underneath. It doesn't seem that way at first (to the original author),\nbut when revisiting the code, it tends to be more difficult than code that is\nlonger but is straightforward.\n\n\u003ca id=\"s2.19.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2194-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"power-features-decision\"\u003e\u003c/a\u003e\n#### 2.19.4 Decision\n\nAvoid these features in your code.\n\nStandard library modules and classes that internally use these features are okay\nto use (for example, `abc.ABCMeta`, `dataclasses`, and `enum`).\n\n\u003ca id=\"s2.20-modern-python\"\u003e\u003c/a\u003e\n\u003ca id=\"220-modern-python\"\u003e\u003c/a\u003e\n\n\u003ca id=\"modern-python\"\u003e\u003c/a\u003e\n### 2.20 Modern Python: from \\_\\_future\\_\\_ imports\n\nNew language version semantic changes may be gated behind a special future\nimport to enable them on a per-file basis within earlier runtimes.\n\n\u003ca id=\"s2.20.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2201-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"modern-python-definition\"\u003e\u003c/a\u003e\n#### 2.20.1 Definition\n\nBeing able to turn on some of the more modern features via `from __future__\nimport` statements allows early use of features from expected future Python\nversions.\n\n\u003ca id=\"s2.20.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2202-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"modern-python-pros\"\u003e\u003c/a\u003e\n#### 2.20.2 Pros\n\nThis has proven to make runtime version upgrades smoother as changes can be made\non a per-file basis while declaring compatibility and preventing regressions\nwithin those files. Modern code is more maintainable as it is less likely to\naccumulate technical debt that will be problematic during future runtime\nupgrades.\n\n\u003ca id=\"s2.20.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2203-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"modern-python-cons\"\u003e\u003c/a\u003e\n#### 2.20.3 Cons\n\nSuch code may not work on very old interpreter versions prior to the\nintroduction of the needed future statement. The need for this is more common in\nprojects supporting an extremely wide variety of environments.\n\n\u003ca id=\"s2.20.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2204-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"modern-python-decision\"\u003e\u003c/a\u003e\n#### 2.20.4 Decision\n\n##### from \\_\\_future\\_\\_ imports\n\nUse of `from __future__ import` statements is encouraged. It allows a given\nsource file to start using more modern Python syntax features today. Once you no\nlonger need to run on a version where the features are hidden behind a\n`__future__` import, feel free to remove those lines.\n\nIn code that may execute on versions as old as 3.5 rather than \u003e= 3.7, import:\n\n```python\nfrom __future__ import generator_stop\n```\n\nFor legacy code with the burden of continuing to support 2.7, import:\n\n```python\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n```\n\nFor more information read the\n[Python future statement definitions](https://docs.python.org/3/library/__future__.html)\ndocumentation.\n\nPlease don't remove these imports until you are confident the code is only ever\nused in a sufficiently modern environment. Even if you do not currently use the\nfeature a specific future import enables in your code today, keeping it in place\nin the file prevents later modifications of the code from inadvertently\ndepending on the older behavior.\n\nUse other `from __future__` import statements as you see fit. We did not include\n`unicode_literals` in our recommendations for 2.7 as it was not a clear win due\nto implicit default codec conversion consequences it introduced in many places\nwithin 2.7. Most dual-version 2-and-3 code was better off with explicit use of\n`b''` and `u''` bytes and unicode string literals where necessary.\n\n##### The six, future, and past libraries\n\nWhen your project still needs to support use under both Python 2 and 3, use the\n[six](https://pypi.org/project/six/),\n[future](https://pypi.org/project/future/), and\n[past](https://pypi.org/project/past/) libraries as you see fit. They exist to\nmake your code cleaner and life easier.\n\n\u003ca id=\"s2.21-type-annotated-code\"\u003e\u003c/a\u003e\n\u003ca id=\"s2.21-typed-code\"\u003e\u003c/a\u003e\n\u003ca id=\"221-type-annotated-code\"\u003e\u003c/a\u003e\n\u003ca id=\"typed-code\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typed-code\"\u003e\u003c/a\u003e\n### 2.21 Type Annotated Code\n\nYou can annotate Python 3 code with type hints according to\n[PEP-484](https://www.python.org/dev/peps/pep-0484/), and type-check the code at\nbuild time with a type checking tool like [pytype](https://github.com/google/pytype).\n\n\nType annotations can be in the source or in a\n[stub pyi file](https://www.python.org/dev/peps/pep-0484/#stub-files). Whenever\npossible, annotations should be in the source. Use pyi files for third-party or\nextension modules.\n\n\n\u003ca id=\"s2.21.1-definition\"\u003e\u003c/a\u003e\n\u003ca id=\"2211-definition\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typed-code-definition\"\u003e\u003c/a\u003e\n#### 2.21.1 Definition\n\nType annotations (or \"type hints\") are for function or method arguments and\nreturn values:\n\n```python\ndef func(a: int) -\u003e List[int]:\n```\n\nYou can also declare the type of a variable using similar\n[PEP-526](https://www.python.org/dev/peps/pep-0526/) syntax:\n\n```python\na: SomeType = some_func()\n```\n\nOr by using a type comment in code that must support legacy Python versions.\n\n```python\na = some_func()  # type: SomeType\n```\n\n\u003ca id=\"s2.21.2-pros\"\u003e\u003c/a\u003e\n\u003ca id=\"2212-pros\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typed-code-pros\"\u003e\u003c/a\u003e\n#### 2.21.2 Pros\n\nType annotations improve the readability and maintainability of your code. The\ntype checker will convert many runtime errors to build-time errors, and reduce\nyour ability to use [Power Features](#power-features).\n\n\u003ca id=\"s2.21.3-cons\"\u003e\u003c/a\u003e\n\u003ca id=\"2213-cons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typed-code-cons\"\u003e\u003c/a\u003e\n#### 2.21.3 Cons\n\nYou will have to keep the type declarations up to date.\nYou might see type errors that you think are\nvalid code. Use of a\n[type checker](https://github.com/google/pytype)\nmay reduce your ability to use [Power Features](#power-features).\n\n\u003ca id=\"s2.21.4-decision\"\u003e\u003c/a\u003e\n\u003ca id=\"2214-decision\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typed-code-decision\"\u003e\u003c/a\u003e\n#### 2.21.4 Decision\n\nYou are strongly encouraged to enable Python type analysis when updating code.\nWhen adding or modifying public APIs, include type annotations and enable\nchecking via pytype in the build system. As static analysis is relatively new to\nPython, we acknowledge that undesired side-effects (such as\nwrongly\ninferred types) may prevent adoption by some projects. In those situations,\nauthors are encouraged to add a comment with a TODO or link to a bug describing\nthe issue(s) currently preventing type annotation adoption in the BUILD file or\nin the code itself as appropriate.\n\n\u003ca id=\"s3-python-style-rules\"\u003e\u003c/a\u003e\n\u003ca id=\"3-python-style-rules\"\u003e\u003c/a\u003e\n\n\u003ca id=\"python-style-rules\"\u003e\u003c/a\u003e\n## 3 Python Style Rules\n\n\u003ca id=\"s3.1-semicolons\"\u003e\u003c/a\u003e\n\u003ca id=\"31-semicolons\"\u003e\u003c/a\u003e\n\n\u003ca id=\"semicolons\"\u003e\u003c/a\u003e\n### 3.1 Semicolons\n\nDo not terminate your lines with semicolons, and do not use semicolons to put\ntwo statements on the same line.\n\n\u003ca id=\"s3.2-line-length\"\u003e\u003c/a\u003e\n\u003ca id=\"32-line-length\"\u003e\u003c/a\u003e\n\n\u003ca id=\"line-length\"\u003e\u003c/a\u003e\n### 3.2 Line length\n\nMaximum line length is *80 characters*.\n\nExplicit exceptions to the 80 character limit:\n\n-   Long import statements.\n-   URLs, pathnames, or long flags in comments.\n-   Long string module level constants not containing whitespace that would be\n    inconvenient to split across lines such as URLs or pathnames.\n    -   Pylint disable comments. (e.g.: `# pylint: disable=invalid-name`)\n\nDo not use backslash line continuation except for `with` statements requiring\nthree or more context managers.\n\nMake use of Python's\n[implicit line joining inside parentheses, brackets and braces](http://docs.python.org/reference/lexical_analysis.html#implicit-line-joining).\nIf necessary, you can add an extra pair of parentheses around an expression.\n\n```python\nYes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n```\n\nWhen a literal string won't fit on a single line, use parentheses for implicit\nline joining.\n\n```python\nx = ('This will build a very long long '\n     'long long long long long long string')\n```\n\nWithin comments, put long URLs on their own line if necessary.\n\n```python\nYes:  # See details at\n      # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html\n```\n\n```python\nNo:  # See details at\n     # http://www.example.com/us/developer/documentation/api/content/\\\n     # v2.0/csv_file_name_extension_full_specification.html\n```\n\nIt is permissible to use backslash continuation when defining a `with` statement\nwhose expressions span three or more lines. For two lines of expressions, use a\nnested `with` statement:\n\n```python\nYes:  with very_long_first_expression_function() as spam, \\\n           very_long_second_expression_function() as beans, \\\n           third_thing() as eggs:\n          place_order(eggs, beans, spam, beans)\n```\n\n```python\nNo:  with VeryLongFirstExpressionFunction() as spam, \\\n          VeryLongSecondExpressionFunction() as beans:\n       PlaceOrder(beans, spam)\n```\n\n```python\nYes:  with very_long_first_expression_function() as spam:\n          with very_long_second_expression_function() as beans:\n              place_order(beans, spam)\n```\n\nMake note of the indentation of the elements in the line continuation examples\nabove; see the [indentation](#s3.4-indentation) section for explanation.\n\nIn all other cases where a line exceeds 80 characters, and the\n[yapf](https://github.com/google/yapf/)\nauto-formatter does not help bring the line below the limit, the line is allowed\nto exceed this maximum. Authors are encouraged to manually break the line up per\nthe notes above when it is sensible.\n\n\u003ca id=\"s3.3-parentheses\"\u003e\u003c/a\u003e\n\u003ca id=\"33-parentheses\"\u003e\u003c/a\u003e\n\n\u003ca id=\"parentheses\"\u003e\u003c/a\u003e\n### 3.3 Parentheses\n\nUse parentheses sparingly.\n\nIt is fine, though not required, to use parentheses around tuples. Do not use\nthem in return statements or conditional statements unless using parentheses for\nimplied line continuation or to indicate a tuple.\n\n```python\nYes: if foo:\n         bar()\n     while x:\n         x = bar()\n     if x and y:\n         bar()\n     if not x:\n         bar()\n     # For a 1 item tuple the ()s are more visually obvious than the comma.\n     onesie = (foo,)\n     return foo\n     return spam, beans\n     return (spam, beans)\n     for (x, y) in dict.items(): ...\n```\n\n```python\nNo:  if (x):\n         bar()\n     if not(x):\n         bar()\n     return (foo)\n```\n\n\u003ca id=\"s3.4-indentation\"\u003e\u003c/a\u003e\n\u003ca id=\"34-indentation\"\u003e\u003c/a\u003e\n\n\u003ca id=\"indentation\"\u003e\u003c/a\u003e\n### 3.4 Indentation\n\nIndent your code blocks with *4 spaces*.\n\nNever use tabs or mix tabs and spaces. In cases of implied line continuation,\nyou should align wrapped elements either vertically, as per the examples in the\n[line length](#s3.2-line-length) section; or using a hanging indent of 4 spaces,\nin which case there should be nothing after the open parenthesis or bracket on\nthe first line.\n\n```python\nYes:   # Aligned with opening delimiter\n       foo = long_function_name(var_one, var_two,\n                                var_three, var_four)\n       meal = (spam,\n               beans)\n\n       # Aligned with opening delimiter in a dictionary\n       foo = {\n           'long_dictionary_key': value1 +\n                                  value2,\n           ...\n       }\n\n       # 4-space hanging indent; nothing on first line\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four)\n       meal = (\n           spam,\n           beans)\n\n       # 4-space hanging indent in a dictionary\n       foo = {\n           'long_dictionary_key':\n               long_dictionary_value,\n           ...\n       }\n```\n\n```python\nNo:    # Stuff on first line forbidden\n       foo = long_function_name(var_one, var_two,\n           var_three, var_four)\n       meal = (spam,\n           beans)\n\n       # 2-space hanging indent forbidden\n       foo = long_function_name(\n         var_one, var_two, var_three,\n         var_four)\n\n       # No hanging indent in a dictionary\n       foo = {\n           'long_dictionary_key':\n           long_dictionary_value,\n           ...\n       }\n```\n\n\u003ca id=\"s3.4.1-trailing-comma\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.4.1-trailing-commas\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.4.1-trailing_comma\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.4.1-trailing_commas\"\u003e\u003c/a\u003e\n\u003ca id=\"341-trailing_comma\"\u003e\u003c/a\u003e\n\u003ca id=\"341-trailing_commas\"\u003e\u003c/a\u003e\n\u003ca id=\"trailing_comma\"\u003e\u003c/a\u003e\n\u003ca id=\"trailing_commas\"\u003e\u003c/a\u003e\n\n\u003ca id=\"trailing-comma\"\u003e\u003c/a\u003e\n#### 3.4.1 Trailing commas in sequences of items?\n\nTrailing commas in sequences of items are recommended only when the closing\ncontainer token `]`, `)`, or `}` does not appear on the same line as the final\nelement. The presence of a trailing comma is also used as a hint to our Python\ncode auto-formatter [YAPF](https://pypi.org/project/yapf/) to direct it to auto-format the container\nof items to one item per line when the `,` after the final element is present.\n\n```python\nYes:   golomb3 = [0, 1, 3]\nYes:   golomb4 = [\n           0,\n           1,\n           4,\n           6,\n       ]\n```\n\n```python\nNo:    golomb4 = [\n           0,\n           1,\n           4,\n           6\n       ]\n```\n\n\u003ca id=\"s3.5-blank-lines\"\u003e\u003c/a\u003e\n\u003ca id=\"35-blank-lines\"\u003e\u003c/a\u003e\n\n\u003ca id=\"blank-lines\"\u003e\u003c/a\u003e\n### 3.5 Blank Lines\n\nTwo blank lines between top-level definitions, be they function or class\ndefinitions. One blank line between method definitions and between the `class`\nline and the first method. No blank line following a `def` line. Use single\nblank lines as you judge appropriate within functions or methods.\n\nBlank lines need not be anchored to the definition. For example, related\ncomments immediately preceding function, class, and method definitions can make\nsense. Consider if your comment might be more useful as part of the docstring.\n\n\u003ca id=\"s3.6-whitespace\"\u003e\u003c/a\u003e\n\u003ca id=\"36-whitespace\"\u003e\u003c/a\u003e\n\n\u003ca id=\"whitespace\"\u003e\u003c/a\u003e\n### 3.6 Whitespace\n\nFollow standard typographic rules for the use of spaces around punctuation.\n\nNo whitespace inside parentheses, brackets or braces.\n\n```python\nYes: spam(ham[1], {'eggs': 2}, [])\n```\n\n```python\nNo:  spam( ham[ 1 ], { 'eggs': 2 }, [ ] )\n```\n\nNo whitespace before a comma, semicolon, or colon. Do use whitespace after a\ncomma, semicolon, or colon, except at the end of the line.\n\n```python\nYes: if x == 4:\n         print(x, y)\n     x, y = y, x\n```\n\n```python\nNo:  if x == 4 :\n         print(x , y)\n     x , y = y , x\n```\n\nNo whitespace before the open paren/bracket that starts an argument list,\nindexing or slicing.\n\n```python\nYes: spam(1)\n```\n\n```python\nNo:  spam (1)\n```\n\n```python\nYes: dict['key'] = list[index]\n```\n\n```python\nNo:  dict ['key'] = list [index]\n```\n\nNo trailing whitespace.\n\nSurround binary operators with a single space on either side for assignment\n(`=`), comparisons (`==, \u003c, \u003e, !=, \u003c\u003e, \u003c=, \u003e=, in, not in, is, is not`), and\nBooleans (`and, or, not`). Use your better judgment for the insertion of spaces\naround arithmetic operators (`+`, `-`, `*`, `/`, `//`, `%`, `**`, `@`).\n\n```python\nYes: x == 1\n```\n\n```python\nNo:  x\u003c1\n```\n\nNever use spaces around `=` when passing keyword arguments or defining a default\nparameter value, with one exception:\n[when a type annotation is present](#typing-default-values), *do* use spaces\naround the `=` for the default parameter value.\n\n```python\nYes: def complex(real, imag=0.0): return Magic(r=real, i=imag)\nYes: def complex(real, imag: float = 0.0): return Magic(r=real, i=imag)\n```\n\n```python\nNo:  def complex(real, imag = 0.0): return Magic(r = real, i = imag)\nNo:  def complex(real, imag: float=0.0): return Magic(r = real, i = imag)\n```\n\nDon't use spaces to vertically align tokens on consecutive lines, since it\nbecomes a maintenance burden (applies to `:`, `#`, `=`, etc.):\n\n```python\nYes:\n  foo = 1000  # comment\n  long_name = 2  # comment that should not be aligned\n\n  dictionary = {\n      'foo': 1,\n      'long_name': 2,\n  }\n```\n\n```python\nNo:\n  foo       = 1000  # comment\n  long_name = 2     # comment that should not be aligned\n\n  dictionary = {\n      'foo'      : 1,\n      'long_name': 2,\n  }\n```\n\n\n\u003ca id=\"Python_Interpreter\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.7-shebang-line\"\u003e\u003c/a\u003e\n\u003ca id=\"37-shebang-line\"\u003e\u003c/a\u003e\n\n\u003ca id=\"shebang-line\"\u003e\u003c/a\u003e\n### 3.7 Shebang Line\n\nMost `.py` files do not need to start with a `#!` line. Start the main file of a\nprogram with\n`#!/usr/bin/env python3` (to support virtualenvs) or `#!/usr/bin/python3` per\n[PEP-394](https://www.python.org/dev/peps/pep-0394/).\n\nThis line is used by the kernel to find the Python interpreter, but is ignored by Python when importing modules. It is only necessary on a file intended to be executed directly.\n\n\u003ca id=\"s3.8-comments-and-docstrings\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.8-comments\"\u003e\u003c/a\u003e\n\u003ca id=\"38-comments-and-docstrings\"\u003e\u003c/a\u003e\n\n\u003ca id=\"documentation\"\u003e\u003c/a\u003e\n### 3.8 Comments and Docstrings\n\nBe sure to use the right style for module, function, method docstrings and\ninline comments.\n\n\u003ca id=\"s3.8.1-comments-in-doc-strings\"\u003e\u003c/a\u003e\n\u003ca id=\"381-docstrings\"\u003e\u003c/a\u003e\n\u003ca id=\"comments-in-doc-strings\"\u003e\u003c/a\u003e\n\n\u003ca id=\"docstrings\"\u003e\u003c/a\u003e\n#### 3.8.1 Docstrings\n\nPython uses *docstrings* to document code. A docstring is a string that is the\nfirst statement in a package, module, class or function. These strings can be\nextracted automatically through the `__doc__` member of the object and are used\nby `pydoc`.\n(Try running `pydoc` on your module to see how it looks.) Always use the three\ndouble-quote `\"\"\"` format for docstrings (per\n[PEP 257](https://www.google.com/url?sa=D\u0026q=http://www.python.org/dev/peps/pep-0257/)).\nA docstring should be organized as a summary line (one physical line not\nexceeding 80 characters) terminated by a period, question mark, or exclamation\npoint. When writing more (encouraged), this must be followed by a blank line,\nfollowed by the rest of the docstring starting at the same cursor position as\nthe first quote of the first line. There are more formatting guidelines for\ndocstrings below.\n\n\u003ca id=\"s3.8.2-comments-in-modules\"\u003e\u003c/a\u003e\n\u003ca id=\"382-modules\"\u003e\u003c/a\u003e\n\u003ca id=\"comments-in-modules\"\u003e\u003c/a\u003e\n\n\u003ca id=\"module-docs\"\u003e\u003c/a\u003e\n#### 3.8.2 Modules\n\nEvery file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL)\n\nFiles should start with a docstring describing the contents and usage of the\nmodule.\n```python\n\"\"\"A one line summary of the module or program, terminated by a period.\n\nLeave one blank line.  The rest of this docstring should contain an\noverall description of the module or program.  Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\n  Typical usage example:\n\n  foo = ClassFoo()\n  bar = foo.FunctionBar()\n\"\"\"\n```\n\n\n\u003ca id=\"s3.8.3-functions-and-methods\"\u003e\u003c/a\u003e\n\u003ca id=\"383-functions-and-methods\"\u003e\u003c/a\u003e\n\u003ca id=\"functions-and-methods\"\u003e\u003c/a\u003e\n\n\u003ca id=\"function-docs\"\u003e\u003c/a\u003e\n#### 3.8.3 Functions and Methods\n\nIn this section, \"function\" means a method, function, or generator.\n\nA function must have a docstring, unless it meets all of the following criteria:\n\n-   not externally visible\n-   very short\n-   obvious\n\nA docstring should give enough information to write a call to the function\nwithout reading the function's code. The docstring should describe the\nfunction's calling syntax and its semantics, but generally not its\nimplementation details, unless those details are relevant to how the function is\nto be used. For example, a function that mutates one of its arguments as a side\neffect should note that in its docstring. Otherwise, subtle but important\ndetails of a function's implementation that are not relevant to the caller are\nbetter expressed as comments alongside the code than within the function's\ndocstring.\n\nThe docstring should be descriptive-style (`\"\"\"Fetches rows from a\nBigtable.\"\"\"`) rather than imperative-style (`\"\"\"Fetch rows from a\nBigtable.\"\"\"`). The docstring for a `@property` data descriptor should use the\nsame style as the docstring for an attribute or a\n\u003ca href=\"#doc-function-args\"\u003efunction argument\u003c/a\u003e (`\"\"\"The Bigtable path.\"\"\"`,\nrather than `\"\"\"Returns the Bigtable path.\"\"\"`).\n\nA method that overrides a method from a base class may have a simple docstring\nsending the reader to its overridden method's docstring, such as `\"\"\"See base\nclass.\"\"\"`. The rationale is that there is no need to repeat in many places\ndocumentation that is already present in the base method's docstring. However,\nif the overriding method's behavior is substantially different from the\noverridden method, or details need to be provided (e.g., documenting additional\nside effects), a docstring with at least those differences is required on the\noverriding method.\n\nCertain aspects of a function should be documented in special sections, listed\nbelow. Each section begins with a heading line, which ends with a colon. All\nsections other than the heading should maintain a hanging indent of two or four\nspaces (be consistent within a file). These sections can be omitted in cases\nwhere the function's name and signature are informative enough that it can be\naptly described using a one-line docstring.\n\n\u003ca id=\"doc-function-args\"\u003e\u003c/a\u003e\n[*Args:*](#doc-function-args)\n:   List each parameter by name. A description should follow the name, and be\n    separated by a colon followed by either a space or newline. If the\n    description is too long to fit on a single 80-character line, use a hanging\n    indent of 2 or 4 spaces more than the parameter name (be consistent with the\n    rest of the docstrings in the file). The description should include required\n    type(s) if the code does not contain a corresponding type annotation. If a\n    function accepts `*foo` (variable length argument lists) and/or `**bar`\n    (arbitrary keyword arguments), they should be listed as `*foo` and `**bar`.\n\n\u003ca id=\"doc-function-returns\"\u003e\u003c/a\u003e\n[*Returns:* (or *Yields:* for generators)](#doc-function-returns)\n:   Describe the type and semantics of the return value. If the function only\n    returns None, this section is not required. It may also be omitted if the\n    docstring starts with Returns or Yields (e.g. `\"\"\"Returns row from Bigtable\n    as a tuple of strings.\"\"\"`) and the opening sentence is sufficient to\n    describe the return value. Do not imitate 'NumPy style'\n    ([example](http://numpy.org/doc/stable/reference/generated/numpy.linalg.qr.html)),\n    which frequently documents a tuple return value as if it were multiple\n    return values with individual names (never mentioning the tuple). Instead,\n    describe such a return value as: \"Returns a tuple (mat_a, mat_b), where\n    mat_a is ..., and ...\". The auxiliary names in the docstring need not\n    necessarily correspond to any internal names used in the function body (as\n    those are not part of the API).\n\n\u003ca id=\"doc-function-raises\"\u003e\u003c/a\u003e\n[*Raises:*](#doc-function-raises)\n:   List all exceptions that are relevant to the interface followed by a\n    description. Use a similar exception name + colon + space or newline and\n    hanging indent style as described in *Args:*. You should not document\n    exceptions that get raised if the API specified in the docstring is violated\n    (because this would paradoxically make behavior under violation of the API\n    part of the API).\n\n```python\ndef fetch_smalltable_rows(table_handle: smalltable.Table,\n                          keys: Sequence[Union[bytes, str]],\n                          require_all_keys: bool = False,\n) -\u003e Mapping[bytes, Tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n        table_handle: An open smalltable.Table instance.\n        keys: A sequence of strings representing the key of each table\n          row to fetch.  String keys will be UTF-8 encoded.\n        require_all_keys: If True only rows with values set for all keys will be\n          returned.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b'Serak': ('Rigel VII', 'Preparer'),\n         b'Zim': ('Irk', 'Invader'),\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        Returned keys are always bytes.  If a key from the keys argument is\n        missing from the dictionary, then that row was not found in the\n        table (and require_all_keys must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the smalltable.\n    \"\"\"\n```\n\nSimilarly, this variation on `Args:` with a line break is also allowed:\n\n```python\ndef fetch_smalltable_rows(table_handle: smalltable.Table,\n                          keys: Sequence[Union[bytes, str]],\n                          require_all_keys: bool = False,\n) -\u003e Mapping[bytes, Tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n      table_handle:\n        An open smalltable.Table instance.\n      keys:\n        A sequence of strings representing the key of each table row to\n        fetch.  String keys will be UTF-8 encoded.\n      require_all_keys:\n        If True only rows with values set for all keys will be returned.\n\n    Returns:\n      A dict mapping keys to the corresponding table row data\n      fetched. Each row is represented as a tuple of strings. For\n      example:\n\n      {b'Serak': ('Rigel VII', 'Preparer'),\n       b'Zim': ('Irk', 'Invader'),\n       b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n      Returned keys are always bytes.  If a key from the keys argument is\n      missing from the dictionary, then that row was not found in the\n      table (and require_all_keys must have been False).\n\n    Raises:\n      IOError: An error occurred accessing the smalltable.\n    \"\"\"\n```\n\n\u003ca id=\"s3.8.4-comments-in-classes\"\u003e\u003c/a\u003e\n\u003ca id=\"384-classes\"\u003e\u003c/a\u003e\n\u003ca id=\"comments-in-classes\"\u003e\u003c/a\u003e\n\n\u003ca id=\"class-docs\"\u003e\u003c/a\u003e\n#### 3.8.4 Classes\n\nClasses should have a docstring below the class definition describing the class.\nIf your class has public attributes, they should be documented here in an\n`Attributes` section and follow the same formatting as a\n[function's `Args`](#doc-function-args) section.\n\n```python\nclass SampleClass:\n    \"\"\"Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \"\"\"\n\n    def __init__(self, likes_spam: bool = False):\n        \"\"\"Inits SampleClass with blah.\"\"\"\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        \"\"\"Performs operation blah.\"\"\"\n```\n\n\u003ca id=\"s3.8.5-block-and-inline-comments\"\u003e\u003c/a\u003e\n\u003ca id=\"comments-in-block-and-inline\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.8.5-comments-in-block-and-inline\"\u003e\u003c/a\u003e\n\u003ca id=\"385-block-and-inline-comments\"\u003e\u003c/a\u003e\n\n\u003ca id=\"comments\"\u003e\u003c/a\u003e\n#### 3.8.5 Block and Inline Comments\n\nThe final place to have comments is in tricky parts of the code. If you're going\nto have to explain it at the next [code review](http://en.wikipedia.org/wiki/Code_review),\nyou should comment it now. Complicated operations get a few lines of comments\nbefore the operations commence. Non-obvious ones get comments at the end of the\nline.\n\n```python\n# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i \u0026 (i-1) == 0:  # True if i is 0 or a power of 2.\n```\n\nTo improve legibility, these comments should start at least 2 spaces away from\nthe code with the comment character `#`, followed by at least one space before\nthe text of the comment itself.\n\nOn the other hand, never describe the code. Assume the person reading the code\nknows Python (though not what you're trying to do) better than you do.\n\n```python\n# BAD COMMENT: Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n```\n\n\u003c!-- The next section is copied from the C++ style guide. --\u003e\n\n\u003ca id=\"s3.8.6-punctuation-spelling-and-grammar\"\u003e\u003c/a\u003e\n\u003ca id=\"386-punctuation-spelling-and-grammar\"\u003e\u003c/a\u003e\n\u003ca id=\"spelling\"\u003e\u003c/a\u003e\n\u003ca id=\"punctuation\"\u003e\u003c/a\u003e\n\u003ca id=\"grammar\"\u003e\u003c/a\u003e\n\n\u003ca id=\"punctuation-spelling-grammar\"\u003e\u003c/a\u003e\n#### 3.8.6 Punctuation, Spelling, and Grammar\n\nPay attention to punctuation, spelling, and grammar; it is easier to read\nwell-written comments than badly written ones.\n\nComments should be as readable as narrative text, with proper capitalization and\npunctuation. In many cases, complete sentences are more readable than sentence\nfragments. Shorter comments, such as comments at the end of a line of code, can\nsometimes be less formal, but you should be consistent with your style.\n\nAlthough it can be frustrating to have a code reviewer point out that you are\nusing a comma when you should be using a semicolon, it is very important that\nsource code maintain a high level of clarity and readability. Proper\npunctuation, spelling, and grammar help with that goal.\n\n\u003ca id=\"s3.10-strings\"\u003e\u003c/a\u003e\n\u003ca id=\"310-strings\"\u003e\u003c/a\u003e\n\n\u003ca id=\"strings\"\u003e\u003c/a\u003e\n### 3.10 Strings\n\nUse an\n[f-string](https://docs.python.org/3/reference/lexical_analysis.html#f-strings),\nthe `%` operator, or the `format` method for formatting strings, even when the\nparameters are all strings. Use your best judgment to decide between `+` and `%`\n(or `format`) though. Do not use `%` or the `format` method for pure\nconcatenation.\n\n```python\nYes: x = a + b\n     x = '%s, %s!' % (imperative, expletive)\n     x = '{}, {}'.format(first, second)\n     x = 'name: %s; score: %d' % (name, n)\n     x = 'name: {}; score: {}'.format(name, n)\n     x = f'name: {name}; score: {n}'\n```\n\n```python\nNo: x = '%s%s' % (a, b)  # use + in this case\n    x = '{}{}'.format(a, b)  # use + in this case\n    x = first + ', ' + second\n    x = 'name: ' + name + '; score: ' + str(n)\n```\n\nAvoid using the `+` and `+=` operators to accumulate a string within a loop. In\nsome conditions, accumulating a string with addition can lead to quadratic\nrather than linear running time. Although common accumulations of this sort may\nbe optimized on CPython, that is an implementation detail. The conditions under\nwhich an optimization applies are not easy to predict and may change. Instead,\nadd each substring to a list and `''.join` the list after the loop terminates,\nor write each substring to an `io.StringIO` buffer. These techniques\nconsistently have amortized-linear run time complexity.\n\n```python\nYes: items = ['\u003ctable\u003e']\n     for last_name, first_name in employee_list:\n         items.append('\u003ctr\u003e\u003ctd\u003e%s, %s\u003c/td\u003e\u003c/tr\u003e' % (last_name, first_name))\n     items.append('\u003c/table\u003e')\n     employee_table = ''.join(items)\n```\n\n```python\nNo: employee_table = '\u003ctable\u003e'\n    for last_name, first_name in employee_list:\n        employee_table += '\u003ctr\u003e\u003ctd\u003e%s, %s\u003c/td\u003e\u003c/tr\u003e' % (last_name, first_name)\n    employee_table += '\u003c/table\u003e'\n```\n\nBe consistent with your choice of string quote character within a file. Pick `'`\nor `\"` and stick with it. It is okay to use the other quote character on a\nstring to avoid the need to backslash-escape quote characters within the string.\n\n```python\nYes:\n  Python('Why are you hiding your eyes?')\n  Gollum(\"I'm scared of lint errors.\")\n  Narrator('\"Good!\" thought a happy Python reviewer.')\n```\n\n```python\nNo:\n  Python(\"Why are you hiding your eyes?\")\n  Gollum('The lint. It burns. It burns us.')\n  Gollum(\"Always the great lint. Watching. Watching.\")\n```\n\nPrefer `\"\"\"` for multi-line strings rather than `'''`. Projects may choose to\nuse `'''` for all non-docstring multi-line strings if and only if they also use\n`'` for regular strings. Docstrings must use `\"\"\"` regardless.\n\nMulti-line strings do not flow with the indentation of the rest of the program.\nIf you need to avoid embedding extra space in the string, use either\nconcatenated single-line strings or a multi-line string with\n[`textwrap.dedent()`](https://docs.python.org/3/library/textwrap.html#textwrap.dedent)\nto remove the initial space on each line:\n\n```python\n  No:\n  long_string = \"\"\"This is pretty ugly.\nDon't do this.\n\"\"\"\n```\n\n```python\n  Yes:\n  long_string = \"\"\"This is fine if your use case can accept\n      extraneous leading spaces.\"\"\"\n```\n\n```python\n  Yes:\n  long_string = (\"And this is fine if you cannot accept\\n\" +\n                 \"extraneous leading spaces.\")\n```\n\n```python\n  Yes:\n  long_string = (\"And this too is fine if you cannot accept\\n\"\n                 \"extraneous leading spaces.\")\n```\n\n```python\n  Yes:\n  import textwrap\n\n  long_string = textwrap.dedent(\"\"\"\\\n      This is also fine, because textwrap.dedent()\n      will collapse common leading spaces in each line.\"\"\")\n```\n\n\u003ca id=\"s3.10.1-logging\"\u003e\u003c/a\u003e\n\u003ca id=\"3101-logging\"\u003e\u003c/a\u003e\n\u003ca id=\"logging\"\u003e\u003c/a\u003e\n\n\u003ca id=\"logging\"\u003e\u003c/a\u003e\n#### 3.10.1 Logging\n\nFor logging functions that expect a pattern-string (with %-placeholders) as\ntheir first argument: Always call them with a string literal (not an f-string!)\nas their first argument with pattern-parameters as subsequent arguments. Some\nlogging implementations collect the unexpanded pattern-string as a queryable\nfield. It also prevents spending time rendering a message that no logger is\nconfigured to output.\n\n```python\n  Yes:\n  import tensorflow as tf\n  logger = tf.get_logger()\n  logger.info('TensorFlow Version is: %s', tf.__version__)\n```\n\n```python\n  Yes:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is: %s', os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error('Cannot write to home directory, $HOME=%r', homedir)\n```\n\n```python\n  No:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is:')\n  logging.info(os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error(f'Cannot write to home directory, $HOME={homedir!r}')\n```\n\n\u003ca id=\"s3.10.2-error-messages\"\u003e\u003c/a\u003e\n\u003ca id=\"3102-error-messages\"\u003e\u003c/a\u003e\n\u003ca id=\"error-messages\"\u003e\u003c/a\u003e\n\n\u003ca id=\"error-messages\"\u003e\u003c/a\u003e\n#### 3.10.2 Error Messages\n\nError messages (such as: message strings on exceptions like `ValueError`, or\nmessages shown to the user) should follow three guidelines:\n\n1.  The message needs to precisely match the actual error condition.\n\n2.  Interpolated pieces need to always be clearly identifiable as such.\n\n3.  They should allow simple automated processing (e.g. grepping).\n\n```python\n  Yes:\n  if not 0 \u003c= p \u003c= 1:\n    raise ValueError(f'Not a probability: {p!r}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError as error:\n    logging.warning('Could not remove directory (reason: %r): %r',\n                    error, workdir)\n```\n\n```python\n  No:\n  if p \u003c 0 or p \u003e 1:  # PROBLEM: also false for float('nan')!\n    raise ValueError(f'Not a probability: {p!r}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: Message makes an assumption that might not be true:\n    # Deletion might have failed for some other reason, misleading\n    # whoever has to debug this.\n    logging.warning('Directory already was deleted: %s', workdir)\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: The message is harder to grep for than necessary, and\n    # not universally non-confusing for all possible values of `workdir`.\n    # Imagine someone calling a library function with such code\n    # using a name such as workdir = 'deleted'. The warning would read:\n    # \"The deleted directory could not be deleted.\"\n    logging.warning('The %s directory could not be deleted.', workdir)\n```\n\n\u003ca id=\"s3.11-files-sockets-closeables\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.11-files-and-sockets\"\u003e\u003c/a\u003e\n\u003ca id=\"311-files-and-sockets\"\u003e\u003c/a\u003e\n\u003ca id=\"files-and-sockets\"\u003e\u003c/a\u003e\n\n\u003ca id=\"files\"\u003e\u003c/a\u003e\n### 3.11 Files, Sockets, and similar Stateful Resources\n\nExplicitly close files and sockets when done with them. This rule naturally\nextends to closeable resources that internally use sockets, such as database\nconnections, and also other resources that need to be closed down in a similar\nfashion. To name only a few examples, this also includes\n[mmap](https://docs.python.org/3/library/mmap.html) mappings,\n[h5py File objects](https://docs.h5py.org/en/stable/high/file.html), and\n[matplotlib.pyplot figure windows](https://matplotlib.org/2.1.0/api/_as_gen/matplotlib.pyplot.close.html).\n\nLeaving files, sockets or other such stateful objects open unnecessarily has\nmany downsides:\n\n-   They may consume limited system resources, such as file descriptors. Code\n    that deals with many such objects may exhaust those resources unnecessarily\n    if they're not returned to the system promptly after use.\n-   Holding files open may prevent other actions such as moving or deleting\n    them, or unmounting a filesystem.\n-   Files and sockets that are shared throughout a program may inadvertently be\n    read from or written to after logically being closed. If they are actually\n    closed, attempts to read or write from them will raise exceptions, making\n    the problem known sooner.\n\nFurthermore, while files and sockets (and some similarly behaving resources) are\nautomatically closed when the object is destructed, coupling the lifetime of the\nobject to the state of the resource is poor practice:\n\n-   There are no guarantees as to when the runtime will actually invoke the\n    `__del__` method. Different Python implementations use different memory\n    management techniques, such as delayed garbage collection, which may\n    increase the object's lifetime arbitrarily and indefinitely.\n-   Unexpected references to the file, e.g. in globals or exception tracebacks,\n    may keep it around longer than intended.\n\nRelying on finalizers to do automatic cleanup that has observable side effects\nhas been rediscovered over and over again to lead to major problems, across many\ndecades and multiple languages (see e.g.\n[this article](https://wiki.sei.cmu.edu/confluence/display/java/MET12-J.+Do+not+use+finalizers)\nfor Java).\n\nThe preferred way to manage files and similar resources is using the\n[`with` statement](http://docs.python.org/reference/compound_stmts.html#the-with-statement):\n\n```python\nwith open(\"hello.txt\") as hello_file:\n    for line in hello_file:\n        print(line)\n```\n\nFor file-like objects that do not support the `with` statement, use\n`contextlib.closing()`:\n\n```python\nimport contextlib\n\nwith contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page:\n    for line in front_page:\n        print(line)\n```\n\nIn rare cases where context-based resource management is infeasible, code\ndocumentation must explain clearly how resource lifetime is managed.\n\n\u003ca id=\"s3.12-todo-comments\"\u003e\u003c/a\u003e\n\u003ca id=\"312-todo-comments\"\u003e\u003c/a\u003e\n\n\u003ca id=\"todo\"\u003e\u003c/a\u003e\n### 3.12 TODO Comments\n\nUse `TODO` comments for code that is temporary, a short-term solution, or\ngood-enough but not perfect.\n\nA `TODO` comment begins with the string `TODO` in all caps and a parenthesized\nname, e-mail address, or other identifier\nof the person or issue with the best context about the problem. This is followed\nby an explanation of what there is to do.\n\nThe purpose is to have a consistent `TODO` format that can be searched to find\nout how to get more details. A `TODO` is not a commitment that the person\nreferenced will fix the problem. Thus when you create a\n`TODO`, it is almost always your name\nthat is given.\n\n```python\n# TODO(kl@gmail.com): Use a \"*\" here for string repetition.\n# TODO(Zeke) Change this to use relations.\n```\n\nIf your `TODO` is of the form \"At a future date do something\" make sure that you\neither include a very specific date (\"Fix by November 2009\") or a very specific\nevent (\"Remove this code when all clients can handle XML responses.\").\n\n\u003ca id=\"s3.13-imports-formatting\"\u003e\u003c/a\u003e\n\u003ca id=\"313-imports-formatting\"\u003e\u003c/a\u003e\n\n\u003ca id=\"imports-formatting\"\u003e\u003c/a\u003e\n### 3.13 Imports formatting\n\nImports should be on separate lines; there are\n[exceptions for `typing` imports](#typing-imports).\n\nE.g.:\n\n```python\nYes: import os\n     import sys\n     from typing import Mapping, Sequence\n```\n\n```python\nNo:  import os, sys\n```\n\n\nImports are always put at the top of the file, just after any module comments\nand docstrings and before module globals and constants. Imports should be\ngrouped from most generic to least generic:\n\n1.  Python future import statements. For example:\n\n    ```python\n    from __future__ import absolute_import\n    from __future__ import division\n    from __future__ import print_function\n    ```\n\n    See [above](#from-future-imports) for more information about those.\n\n2.  Python standard library imports. For example:\n\n    ```python\n    import sys\n    ```\n\n3.  [third-party](https://pypi.org/) module\n    or package imports. For example:\n\n    \n    ```python\n    import tensorflow as tf\n    ```\n\n4.  Code repository\n    sub-package imports. For example:\n\n    \n    ```python\n    from otherproject.ai import mind\n    ```\n\n5.  **Deprecated:** application-specific imports that are part of the same\n    top level\n    sub-package as this file. For example:\n\n    \n    ```python\n    from myproject.backend.hgwells import time_machine\n    ```\n\n    You may find older Google Python Style code doing this, but it is no longer\n    required. **New code is encouraged not to bother with this.** Simply treat\n    application-specific sub-package imports the same as other sub-package\n    imports.\n\n    \nWithin each grouping, imports should be sorted lexicographically, ignoring case,\naccording to each module's full package path (the `path` in `from path import\n...`). Code may optionally place a blank line between import sections.\n\n```python\nimport collections\nimport queue\nimport sys\n\nfrom absl import app\nfrom absl import flags\nimport bs4\nimport cryptography\nimport tensorflow as tf\n\nfrom book.genres import scifi\nfrom myproject.backend import huxley\nfrom myproject.backend.hgwells import time_machine\nfrom myproject.backend.state_machine import main_loop\nfrom otherproject.ai import body\nfrom otherproject.ai import mind\nfrom otherproject.ai import soul\n\n# Older style code may have these imports down here instead:\n#from myproject.backend.hgwells import time_machine\n#from myproject.backend.state_machine import main_loop\n```\n\n\n\u003ca id=\"s3.14-statements\"\u003e\u003c/a\u003e\n\u003ca id=\"314-statements\"\u003e\u003c/a\u003e\n\n\u003ca id=\"statements\"\u003e\u003c/a\u003e\n### 3.14 Statements\n\nGenerally only one statement per line.\n\nHowever, you may put the result of a test on the same line as the test only if\nthe entire statement fits on one line. In particular, you can never do so with\n`try`/`except` since the `try` and `except` can't both fit on the same line, and\nyou can only do so with an `if` if there is no `else`.\n\n```python\nYes:\n\n  if foo: bar(foo)\n```\n\n```python\nNo:\n\n  if foo: bar(foo)\n  else:   baz(foo)\n\n  try:               bar(foo)\n  except ValueError: baz(foo)\n\n  try:\n      bar(foo)\n  except ValueError: baz(foo)\n```\n\n\u003ca id=\"s3.15-accessors\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.15-access-control\"\u003e\u003c/a\u003e\n\u003ca id=\"315-access-control\"\u003e\u003c/a\u003e\n\u003ca id=\"access-control\"\u003e\u003c/a\u003e\n\u003ca id=\"accessors\"\u003e\u003c/a\u003e\n\n\u003ca id=\"getters-and-setters\"\u003e\u003c/a\u003e\n### 3.15 Getters and Setters\n\nGetter and setter functions (also called accessors and mutators) should be used\nwhen they provide a meaningful role or behavior for getting or setting a\nvariable's value.\n\nIn particular, they should be used when getting or setting the variable is\ncomplex or the cost is significant, either currently or in a reasonable future.\n\nIf, for example, a pair of getters/setters simply read and write an internal\nattribute, the internal attribute should be made public instead. By comparison,\nif setting a variable means some state is invalidated or rebuilt, it should be a\nsetter function. The function invocation hints that a potentially non-trivial\noperation is occurring. Alternatively, [properties](#properties) may be an\noption when simple logic is needed, or refactoring to no longer need getters and\nsetters.\n\nGetters and setters should follow the [Naming](#s3.16-naming) guidelines, such\nas `get_foo()` and `set_foo()`.\n\nIf the past behavior allowed access through a property, do not bind the new\ngetter/setter functions to the property. Any code still attempting to access the\nvariable by the old method should break visibly so they are made aware of the\nchange in complexity.\n\n\u003ca id=\"s3.16-naming\"\u003e\u003c/a\u003e\n\u003ca id=\"316-naming\"\u003e\u003c/a\u003e\n\n\u003ca id=\"naming\"\u003e\u003c/a\u003e\n### 3.16 Naming\n\n`module_name`, `package_name`, `ClassName`, `method_name`, `ExceptionName`,\n`function_name`, `GLOBAL_CONSTANT_NAME`, `global_var_name`, `instance_var_name`,\n`function_parameter_name`, `local_var_name`.\n\n\nFunction names, variable names, and filenames should be descriptive; eschew\nabbreviation. In particular, do not use abbreviations that are ambiguous or\nunfamiliar to readers outside your project, and do not abbreviate by deleting\nletters within a word.\n\nAlways use a `.py` filename extension. Never use dashes.\n\n\u003ca id=\"s3.16.1-names-to-avoid\"\u003e\u003c/a\u003e\n\u003ca id=\"3161-names-to-avoid\"\u003e\u003c/a\u003e\n\n\u003ca id=\"names-to-avoid\"\u003e\u003c/a\u003e\n#### 3.16.1 Names to Avoid\n\n-   single character names, except for specifically allowed cases:\n\n    -   counters or iterators (e.g. `i`, `j`, `k`, `v`, et al.)\n    -   `e` as an exception identifier in `try/except` statements.\n    -   `f` as a file handle in `with` statements\n\n    Please be mindful not to abuse single-character naming. Generally speaking,\n    descriptiveness should be proportional to the name's scope of visibility.\n    For example, `i` might be a fine name for 5-line code block but within\n    multiple nested scopes, it is likely too vague.\n\n-   dashes (`-`) in any package/module name\n\n-   `__double_leading_and_trailing_underscore__` names (reserved by Python)\n\n-   offensive terms\n\n-   names that needlessly include the type of the variable (for example:\n    `id_to_name_dict`)\n\n\u003ca id=\"s3.16.2-naming-conventions\"\u003e\u003c/a\u003e\n\u003ca id=\"3162-naming-convention\"\u003e\u003c/a\u003e\n\n\u003ca id=\"naming-conventions\"\u003e\u003c/a\u003e\n#### 3.16.2 Naming Conventions\n\n-   \"Internal\" means internal to a module, or protected or private within a\n    class.\n\n-   Prepending a single underscore (`_`) has some support for protecting module\n    variables and functions (linters will flag protected member access).\n\n-   Prepending a double underscore (`__` aka \"dunder\") to an instance variable\n    or method effectively makes the variable or method private to its class\n    (using name mangling); we discourage its use as it impacts readability and\n    testability, and isn't *really* private. Prefer a single underscore.\n\n-   Place related classes and top-level functions together in a\n    module.\n    Unlike Java, there is no need to limit yourself to one class per module.\n\n-   Use CapWords for class names, but lower\\_with\\_under.py for module names.\n    Although there are some old modules named CapWords.py, this is now\n    discouraged because it's confusing when the module happens to be named after\n    a class. (\"wait -- did I write `import StringIO` or `from StringIO import\n    StringIO`?\")\n\n-   Underscores may appear in *unittest* method names starting with `test` to\n    separate logical components of the name, even if those components use\n    CapWords. One possible pattern is `test\u003cMethodUnderTest\u003e_\u003cstate\u003e`; for\n    example `testPop_EmptyStack` is okay. There is no One Correct Way to name\n    test methods.\n\n\u003ca id=\"s3.16.3-file-naming\"\u003e\u003c/a\u003e\n\u003ca id=\"3163-file-naming\"\u003e\u003c/a\u003e\n\n\u003ca id=\"file-naming\"\u003e\u003c/a\u003e\n#### 3.16.3 File Naming\n\nPython filenames must have a `.py` extension and must not contain dashes (`-`).\nThis allows them to be imported and unittested. If you want an executable to be\naccessible without the extension, use a symbolic link or a simple bash wrapper\ncontaining `exec \"$0.py\" \"$@\"`.\n\n\u003ca id=\"s3.16.4-guidelines-derived-from-guidos-recommendations\"\u003e\u003c/a\u003e\n\u003ca id=\"3164-guidelines-derived-from-guidos-recommendations\"\u003e\u003c/a\u003e\n\n\u003ca id=\"guidelines-derived-from-guidos-recommendations\"\u003e\u003c/a\u003e\n#### 3.16.4 Guidelines derived from [Guido](https://en.wikipedia.org/wiki/Guido_van_Rossum)'s Recommendations\n\n\u003ctable rules=\"all\" border=\"1\" summary=\"Guidelines from Guido's Recommendations\"\n       cellspacing=\"2\" cellpadding=\"2\"\u003e\n\n  \u003ctr\u003e\n    \u003cth\u003eType\u003c/th\u003e\n    \u003cth\u003ePublic\u003c/th\u003e\n    \u003cth\u003eInternal\u003c/th\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003ePackages\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eModules\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_lower_with_under\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eClasses\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eCapWords\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_CapWords\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eExceptions\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eCapWords\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eFunctions\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under()\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_lower_with_under()\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eGlobal/Class Constants\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eCAPS_WITH_UNDER\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_CAPS_WITH_UNDER\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eGlobal/Class Variables\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_lower_with_under\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eInstance Variables\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_lower_with_under\u003c/code\u003e (protected)\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eMethod Names\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under()\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e_lower_with_under()\u003c/code\u003e (protected)\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eFunction/Method Parameters\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eLocal Variables\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003elower_with_under\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\n\u003c/table\u003e\n\n\n\u003ca id=\"s3.17-main\"\u003e\u003c/a\u003e\n\u003ca id=\"317-main\"\u003e\u003c/a\u003e\n\n\u003ca id=\"math-notation\"\u003e\u003c/a\u003e\n#### 3.16.5 Mathematical Notation\n\nFor mathematically heavy code, short variable names that would otherwise violate\nthe style guide are preferred when they match established notation in a\nreference paper or algorithm. When doing so, reference the source of all naming\nconventions in a comment or docstring or, if the source is not accessible,\nclearly document the naming conventions. Prefer PEP8-compliant\n`descriptive_names` for public APIs, which are much more likely to be\nencountered out of context.\n\n\u003ca id=\"main\"\u003e\u003c/a\u003e\n### 3.17 Main\n\nIn Python, `pydoc` as well as unit tests require modules to be importable. If a\nfile is meant to be used as an executable, its main functionality should be in a\n`main()` function, and your code should always check `if __name__ == '__main__'`\nbefore executing your main program, so that it is not executed when the module\nis imported.\n\nWhen using [absl](https://github.com/abseil/abseil-py), use `app.run`:\n\n```python\nfrom absl import app\n...\n\ndef main(argv: Sequence[str]):\n    # process non-flag arguments\n    ...\n\nif __name__ == '__main__':\n    app.run(main)\n```\n\nOtherwise, use:\n\n```python\ndef main():\n    ...\n\nif __name__ == '__main__':\n    main()\n```\n\nAll code at the top level will be executed when the module is imported. Be\ncareful not to call functions, create objects, or perform other operations that\nshould not be executed when the file is being `pydoc`ed.\n\n\u003ca id=\"s3.18-function-length\"\u003e\u003c/a\u003e\n\u003ca id=\"318-function-length\"\u003e\u003c/a\u003e\n\n\u003ca id=\"function-length\"\u003e\u003c/a\u003e\n### 3.18 Function length\n\nPrefer small and focused functions.\n\nWe recognize that long functions are sometimes appropriate, so no hard limit is\nplaced on function length. If a function exceeds about 40 lines, think about\nwhether it can be broken up without harming the structure of the program.\n\nEven if your long function works perfectly now, someone modifying it in a few\nmonths may add new behavior. This could result in bugs that are hard to find.\nKeeping your functions short and simple makes it easier for other people to read\nand modify your code.\n\nYou could find long and complicated functions when working with\nsome\ncode. Do not be intimidated by modifying existing code: if working with such a\nfunction proves to be difficult, you find that errors are hard to debug, or you\nwant to use a piece of it in several different contexts, consider breaking up\nthe function into smaller and more manageable pieces.\n\n\u003ca id=\"s3.19-type-annotations\"\u003e\u003c/a\u003e\n\u003ca id=\"319-type-annotations\"\u003e\u003c/a\u003e\n\n\u003ca id=\"type-annotations\"\u003e\u003c/a\u003e\n### 3.19 Type Annotations\n\n\u003ca id=\"s3.19.1-general-rules\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.1-general\"\u003e\u003c/a\u003e\n\u003ca id=\"3191-general-rules\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-general\"\u003e\u003c/a\u003e\n#### 3.19.1 General Rules\n\n*   Familiarize yourself with\n    [PEP-484](https://www.python.org/dev/peps/pep-0484/).\n*   In methods, only annotate `self`, or `cls` if it is necessary for proper\n    type information. e.g., `@classmethod def create(cls: Type[T]) -\u003e T: return\n    cls()`\n*   If any other variable or a returned type should not be expressed, use `Any`.\n*   You are not required to annotate all the functions in a module.\n    -   At least annotate your public APIs.\n    -   Use judgment to get to a good balance between safety and clarity on the\n        one hand, and flexibility on the other.\n    -   Annotate code that is prone to type-related errors (previous bugs or\n        complexity).\n    -   Annotate code that is hard to understand.\n    -   Annotate code as it becomes stable from a types perspective. In many\n        cases, you can annotate all the functions in mature code without losing\n        too much flexibility.\n\n\u003ca id=\"s3.19.2-line-breaking\"\u003e\u003c/a\u003e\n\u003ca id=\"3192-line-breaking\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-line-breaking\"\u003e\u003c/a\u003e\n#### 3.19.2 Line Breaking\n\nTry to follow the existing [indentation](#indentation) rules.\n\nAfter annotating, many function signatures will become \"one parameter per line\".\n\n```python\ndef my_method(self,\n              first_var: int,\n              second_var: Foo,\n              third_var: Optional[Bar]) -\u003e int:\n  ...\n```\n\nAlways prefer breaking between variables, and not, for example, between variable\nnames and type annotations. However, if everything fits on the same line, go for\nit.\n\n```python\ndef my_method(self, first_var: int) -\u003e int:\n  ...\n```\n\nIf the combination of the function name, the last parameter, and the return type\nis too long, indent by 4 in a new line.\n\n```python\ndef my_method(\n    self, first_var: int) -\u003e Tuple[MyLongType1, MyLongType1]:\n  ...\n```\n\nWhen the return type does not fit on the same line as the last parameter, the\npreferred way is to indent the parameters by 4 on a new line and align the\nclosing parenthesis with the `def`.\n\n```python\nYes:\ndef my_method(\n    self, other_arg: Optional[MyLongType]\n) -\u003e Dict[OtherLongType, MyLongType]:\n  ...\n```\n\n`pylint`\nallows you to move the closing parenthesis to a new line and align with the\nopening one, but this is less readable.\n\n```python\nNo:\ndef my_method(self,\n              other_arg: Optional[MyLongType]\n             ) -\u003e Dict[OtherLongType, MyLongType]:\n  ...\n```\n\nAs in the examples above, prefer not to break types. However, sometimes they are\ntoo long to be on a single line (try to keep sub-types unbroken).\n\n```python\ndef my_method(\n    self,\n    first_var: Tuple[List[MyLongType1],\n                     List[MyLongType2]],\n    second_var: List[Dict[\n        MyLongType3, MyLongType4]]) -\u003e None:\n  ...\n```\n\nIf a single name and type is too long, consider using an\n[alias](#typing-aliases) for the type. The last resort is to break after the\ncolon and indent by 4.\n\n```python\nYes:\ndef my_function(\n    long_variable_name:\n        long_module_name.LongTypeName,\n) -\u003e None:\n  ...\n```\n\n```python\nNo:\ndef my_function(\n    long_variable_name: long_module_name.\n        LongTypeName,\n) -\u003e None:\n  ...\n```\n\n\u003ca id=\"s3.19.3-forward-declarations\"\u003e\u003c/a\u003e\n\u003ca id=\"3193-forward-declarations\"\u003e\u003c/a\u003e\n\n\u003ca id=\"forward-declarations\"\u003e\u003c/a\u003e\n#### 3.19.3 Forward Declarations\n\nIf you need to use a class name from the same module that is not yet defined --\nfor example, if you need the class inside the class declaration, or if you use a\nclass that is defined below -- either use `from __future__ import annotations`\nfor simple cases or use a string for the class name.\n\n```python\nfrom __future__ import annotations\n\nclass MyClass:\n\n  def __init__(self, stack: Sequence[MyClass]) -\u003e None:\n```\n\n\u003ca id=\"s3.19.4-default-values\"\u003e\u003c/a\u003e\n\u003ca id=\"3194-default-values\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-default-values\"\u003e\u003c/a\u003e\n#### 3.19.4 Default Values\n\nAs per\n[PEP-008](https://www.python.org/dev/peps/pep-0008/#other-recommendations), use\nspaces around the `=` *only* for arguments that have both a type annotation and\na default value.\n\n```python\nYes:\ndef func(a: int = 0) -\u003e int:\n  ...\n```\n\n```python\nNo:\ndef func(a:int=0) -\u003e int:\n  ...\n```\n\n\u003ca id=\"s3.19.5-nonetype\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.5-none-type\"\u003e\u003c/a\u003e\n\u003ca id=\"3195-nonetype\"\u003e\u003c/a\u003e\n\n\u003ca id=\"none-type\"\u003e\u003c/a\u003e\n#### 3.19.5 NoneType\n\nIn the Python type system, `NoneType` is a \"first class\" type, and for typing\npurposes, `None` is an alias for `NoneType`. If an argument can be `None`, it\nhas to be declared! You can use `Union`, but if there is only one other type,\nuse `Optional`.\n\nUse explicit `Optional` instead of implicit `Optional`. Earlier versions of PEP\n484 allowed `a: str = None` to be interpreted as `a: Optional[str] = None`, but\nthat is no longer the preferred behavior.\n\n```python\nYes:\ndef func(a: Optional[str], b: Optional[str] = None) -\u003e str:\n  ...\ndef multiple_nullable_union(a: Union[None, str, int]) -\u003e str:\n  ...\n```\n\n```python\nNo:\ndef nullable_union(a: Union[None, str]) -\u003e str:\n  ...\ndef implicit_optional(a: str = None) -\u003e str:\n  ...\n```\n\n\u003ca id=\"s3.19.6-type-aliases\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.6-aliases\"\u003e\u003c/a\u003e\n\u003ca id=\"3196-type-aliases\"\u003e\u003c/a\u003e\n\u003ca id=\"typing-aliases\"\u003e\u003c/a\u003e\n\n\u003ca id=\"type-aliases\"\u003e\u003c/a\u003e\n#### 3.19.6 Type Aliases\n\nYou can declare aliases of complex types. The name of an alias should be\nCapWorded. If the alias is used only in this module, it should be \\_Private.\n\nFor example, if the name of the module together with the name of the type is too\nlong:\n\n```python\n_ShortName = module_with_long_name.TypeWithLongName\nComplexMap = Mapping[str, List[Tuple[int, int]]]\n```\n\nOther examples are complex nested types and multiple return variables from a\nfunction (as a tuple).\n\n\u003ca id=\"s3.19.7-ignoring-types\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.7-ignore\"\u003e\u003c/a\u003e\n\u003ca id=\"3197-ignoring-types\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-ignore\"\u003e\u003c/a\u003e\n#### 3.19.7 Ignoring Types\n\nYou can disable type checking on a line with the special comment `# type:\nignore`.\n\n`pytype` has a disable option for specific errors (similar to lint):\n\n```python\n# pytype: disable=attribute-error\n```\n\n\u003ca id=\"s3.19.8-typing-variables\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.8-comments\"\u003e\u003c/a\u003e\n\u003ca id=\"3198-typing-internal-variables\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-variables\"\u003e\u003c/a\u003e\n#### 3.19.8 Typing Variables\n\nIf an internal variable has a type that is hard or impossible to infer, you can\nspecify its type in a couple ways.\n\n\u003ca id=\"type-comments\"\u003e\u003c/a\u003e\n[*Type Comments:*](#type-comments)\n:   Use a `# type:` comment on the end of the line\n\n```python\na = SomeUndecoratedFunction()  # type: Foo\n```\n\n\u003ca id=\"annotated-assignments\"\u003e\u003c/a\u003e\n[*Annotated Assignments*](#annotated-assignments)\n:   Use a colon and type between the variable name and value, as with function\n    arguments.\n\n```python\na: Foo = SomeUndecoratedFunction()\n```\n\n\u003ca id=\"s3.19.9-tuples-vs-lists\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.9-tuples\"\u003e\u003c/a\u003e\n\u003ca id=\"3199-tuples-vs-lists\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-tuples\"\u003e\u003c/a\u003e\n#### 3.19.9 Tuples vs Lists\n\nTyped lists can only contain objects of a single type. Typed tuples can either\nhave a single repeated type or a set number of elements with different types.\nThe latter is commonly used as the return type from a function.\n\n```python\na = [1, 2, 3]  # type: List[int]\nb = (1, 2, 3)  # type: Tuple[int, ...]\nc = (1, \"2\", 3.5)  # type: Tuple[int, str, float]\n```\n\n\u003ca id=\"s3.19.10-typevars\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.10-type-var\"\u003e\u003c/a\u003e\n\u003ca id=\"31910-typevar\"\u003e\u003c/a\u003e\n\u003ca id=\"typing-type-var\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typevars\"\u003e\u003c/a\u003e\n#### 3.19.10 TypeVars\n\nThe Python type system has\n[generics](https://www.python.org/dev/peps/pep-0484/#generics). The factory\nfunction `TypeVar` is a common way to use them.\n\nExample:\n\n```python\nfrom typing import List, TypeVar\nT = TypeVar(\"T\")\n...\ndef next(l: List[T]) -\u003e T:\n  return l.pop()\n```\n\nA TypeVar can be constrained:\n\n```python\nAddableType = TypeVar(\"AddableType\", int, float, str)\ndef add(a: AddableType, b: AddableType) -\u003e AddableType:\n  return a + b\n```\n\nA common predefined type variable in the `typing` module is `AnyStr`. Use it for\nmultiple annotations that can be `bytes` or `unicode` and must all be the same\ntype.\n\n```python\nfrom typing import AnyStr\ndef check_length(x: AnyStr) -\u003e AnyStr:\n  if len(x) \u003c= 42:\n    return x\n  raise ValueError()\n```\n\n\u003ca id=\"s3.19.11-string-types\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.11-strings\"\u003e\u003c/a\u003e\n\u003ca id=\"31911-string-types\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-strings\"\u003e\u003c/a\u003e\n#### 3.19.11 String types\n\nThe proper type for annotating strings depends on what versions of Python the\ncode is intended for.\n\nPrefer to use `str`, though `Text` is also acceptable. Be consistent in using\none or the other. For code that deals with binary data, use `bytes`. For Python\n2 compatible code that processes text data (`str` or `unicode` in Python 2,\n`str` in Python 3), use `Text`.\n\n```python\ndef deals_with_text_data_in_py3(x: str) -\u003e str:\n  ...\ndef deals_with_binary_data(x: bytes) -\u003e bytes:\n  ...\ndef py2_compatible_text_data_processor(x: Text) -\u003e Text:\n  ...\n```\n\nIn some uncommon Python 2 compatibility cases, `str` may make sense instead of\n`Text`, typically to aid compatibility when the return types aren't the same\nbetween Python 2 and Python 3. Never use `unicode` as it doesn't exist in Python\n3. The reason this discrepancy exists is because `str` means something different\nin Python 2 than in Python 3.\n\nNo:\n\n```python\ndef py2_code(x: str) -\u003e unicode:\n  ...\n```\n\nIf the type can be either bytes or text, use `Union`, with the appropriate text\ntype.\n\n```python\nfrom typing import Text, Union\n...\ndef py3_only(x: Union[bytes, str]) -\u003e Union[bytes, str]:\n  ...\ndef py2_compatible(x: Union[bytes, Text]) -\u003e Union[bytes, Text]:\n  ...\n```\n\nIf all the string types of a function are always the same, for example if the\nreturn type is the same as the argument type in the code above, use\n[AnyStr](#typing-type-var).\n\n\u003ca id=\"s3.19.12-imports-for-typing\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.12-imports\"\u003e\u003c/a\u003e\n\u003ca id=\"31912-imports-for-typing\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-imports\"\u003e\u003c/a\u003e\n#### 3.19.12 Imports For Typing\n\nFor classes from the `typing` module, always import the class itself. You are\nexplicitly allowed to import multiple specific classes on one line from the\n`typing` module. Ex:\n\n```python\nfrom typing import Any, Dict, Optional\n```\n\nGiven that this way of importing from `typing` adds items to the local\nnamespace, any names in `typing` should be treated similarly to keywords, and\nnot be defined in your Python code, typed or not. If there is a collision\nbetween a type and an existing name in a module, import it using `import x as\ny`.\n\n```python\nfrom typing import Any as AnyType\n```\n\n\u003ca id=\"s3.19.13-conditional-imports\"\u003e\u003c/a\u003e\n\u003ca id=\"31913-conditional-imports\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-conditional-imports\"\u003e\u003c/a\u003e\n#### 3.19.13 Conditional Imports\n\nUse conditional imports only in exceptional cases where the additional imports\nneeded for type checking must be avoided at runtime. This pattern is\ndiscouraged; alternatives such as refactoring the code to allow top level\nimports should be preferred.\n\nImports that are needed only for type annotations can be placed within an `if\nTYPE_CHECKING:` block.\n\n-   Conditionally imported types need to be referenced as strings, to be forward\n    compatible with Python 3.6 where the annotation expressions are actually\n    evaluated.\n-   Only entities that are used solely for typing should be defined here; this\n    includes aliases. Otherwise it will be a runtime error, as the module will\n    not be imported at runtime.\n-   The block should be right after all the normal imports.\n-   There should be no empty lines in the typing imports list.\n-   Sort this list as if it were a regular imports list.\n```python\nimport typing\nif typing.TYPE_CHECKING:\n  import sketch\ndef f(x: \"sketch.Sketch\"): ...\n```\n\n\u003ca id=\"s3.19.14-circular-dependencies\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.14-circular-deps\"\u003e\u003c/a\u003e\n\u003ca id=\"31914-circular-dependencies\"\u003e\u003c/a\u003e\n\n\u003ca id=\"typing-circular-deps\"\u003e\u003c/a\u003e\n#### 3.19.14 Circular Dependencies\n\nCircular dependencies that are caused by typing are code smells. Such code is a\ngood candidate for refactoring. Although technically it is possible to keep\ncircular dependencies, various build systems will not let you do so\nbecause each module has to depend on the other.\n\nReplace modules that create circular dependency imports with `Any`. Set an\n[alias](#typing-aliases) with a meaningful name, and use the real type name from\nthis module (any attribute of Any is Any). Alias definitions should be separated\nfrom the last import by one line.\n\n```python\nfrom typing import Any\n\nsome_mod = Any  # some_mod.py imports this module.\n...\n\ndef my_method(self, var: \"some_mod.SomeType\") -\u003e None:\n  ...\n```\n\n\u003ca id=\"typing-generics\"\u003e\u003c/a\u003e\n\u003ca id=\"s3.19.15-generics\"\u003e\u003c/a\u003e\n\u003ca id=\"31915-generics\"\u003e\u003c/a\u003e\n\n\u003ca id=\"generics\"\u003e\u003c/a\u003e\n#### 3.19.15 Generics\n\nWhen annotating, prefer to specify type parameters for generic types; otherwise,\n[the generics' parameters will be assumed to be `Any`](https://www.python.org/dev/peps/pep-0484/#the-any-type).\n\n```python\ndef get_names(employee_ids: List[int]) -\u003e Dict[int, Any]:\n  ...\n```\n\n```python\n# These are both interpreted as get_names(employee_ids: List[Any]) -\u003e Dict[Any, Any]\ndef get_names(employee_ids: list) -\u003e Dict:\n  ...\n\ndef get_names(employee_ids: List) -\u003e Dict:\n  ...\n```\n\nIf the best type parameter for a generic is `Any`, make it explicit, but\nremember that in many cases [`TypeVar`](#typing-type-var) might be more\nappropriate:\n\n```python\ndef get_names(employee_ids: List[Any]) -\u003e Dict[Any, str]:\n  \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"\n```\n\n```python\nT = TypeVar('T')\ndef get_names(employee_ids: List[T]) -\u003e Dict[T, str]:\n  \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"\n```\n\n\n\u003ca id=\"4-parting-words\"\u003e\u003c/a\u003e\n\n\u003ca id=\"consistency\"\u003e\u003c/a\u003e\n## 4 Parting Words\n\n*BE CONSISTENT*.\n\nIf you're editing code, take a few minutes to look at the code around you and\ndetermine its style. If they use spaces around all their arithmetic operators,\nyou should too. If their comments have little boxes of hash marks around them,\nmake your comments have little boxes of hash marks around them too.\n\nThe point of having style guidelines is to have a common vocabulary of coding so\npeople can concentrate on what you're saying rather than on how you're saying\nit. We present global style rules here so people know the vocabulary, but local\nstyle is also important. If code you add to a file looks drastically different\nfrom the existing code around it, it throws readers out of their rhythm when\nthey go to read it. Avoid this.\n\n\n\u003ca id=\"5-attribution\"\u003e\u003c/a\u003e\n\n## 5 Attribution\n\nThis work, is a derivative of [Google Python Style Guide](https://github.com/google/styleguide/blob/gh-pages/pyguide.md) by Google, used under [CC BY](https://creativecommons.org/licenses/by/3.0/). This document is licensed under [CC BY](https://creativecommons.org/licenses/by/3.0/) by Gogo.\n\n\u003ca rel=\"license\" href=\"https://creativecommons.org/licenses/by/3.0/\"\u003e\u003cimg alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/3.0/88x31.png\" /\u003e\u003c/a\u003e\n","lastmodified":"2023-05-24T16:30:19.491098893Z","tags":[]}}